{"version":3,"file":"jd-table.min.js","sources":["../node_modules/downloadjs/download.js","../node_modules/vue-runtime-helpers/dist/normalize-component.js","../src/jd-table.vue","../src/wrapper.js"],"sourcesContent":["//download.js v4.2, by dandavis; 2008-2016. [MIT] see http://danml.com/download.html for tests/usage\n// v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and optional mime\n// v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs\n// v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.\n// v4 adds AMD/UMD, commonJS, and plain browser support\n// v4.1 adds url download capability via solo URL argument (same domain/CORS only)\n// v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors\n// https://github.com/rndme/download\n\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.download = factory();\n  }\n}(this, function () {\n\n\treturn function download(data, strFileName, strMimeType) {\n\n\t\tvar self = window, // this script is only for browsers anyway...\n\t\t\tdefaultMime = \"application/octet-stream\", // this default mime also triggers iframe downloads\n\t\t\tmimeType = strMimeType || defaultMime,\n\t\t\tpayload = data,\n\t\t\turl = !strFileName && !strMimeType && payload,\n\t\t\tanchor = document.createElement(\"a\"),\n\t\t\ttoString = function(a){return String(a);},\n\t\t\tmyBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),\n\t\t\tfileName = strFileName || \"download\",\n\t\t\tblob,\n\t\t\treader;\n\t\t\tmyBlob= myBlob.call ? myBlob.bind(self) : Blob ;\n\t  \n\t\tif(String(this)===\"true\"){ //reverse arguments, allowing download.bind(true, \"text/xml\", \"export.xml\") to act as a callback\n\t\t\tpayload=[payload, mimeType];\n\t\t\tmimeType=payload[0];\n\t\t\tpayload=payload[1];\n\t\t}\n\n\n\t\tif(url && url.length< 2048){ // if no filename and no mime, assume a url was passed as the only argument\n\t\t\tfileName = url.split(\"/\").pop().split(\"?\")[0];\n\t\t\tanchor.href = url; // assign href prop to temp anchor\n\t\t  \tif(anchor.href.indexOf(url) !== -1){ // if the browser determines that it's a potentially valid url path:\n        \t\tvar ajax=new XMLHttpRequest();\n        \t\tajax.open( \"GET\", url, true);\n        \t\tajax.responseType = 'blob';\n        \t\tajax.onload= function(e){ \n\t\t\t\t  download(e.target.response, fileName, defaultMime);\n\t\t\t\t};\n        \t\tsetTimeout(function(){ ajax.send();}, 0); // allows setting custom ajax headers using the return:\n\t\t\t    return ajax;\n\t\t\t} // end if valid url?\n\t\t} // end if url?\n\n\n\t\t//go ahead and download dataURLs right away\n\t\tif(/^data:([\\w+-]+\\/[\\w+.-]+)?[,;]/.test(payload)){\n\t\t\n\t\t\tif(payload.length > (1024*1024*1.999) && myBlob !== toString ){\n\t\t\t\tpayload=dataUrlToBlob(payload);\n\t\t\t\tmimeType=payload.type || defaultMime;\n\t\t\t}else{\t\t\t\n\t\t\t\treturn navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:\n\t\t\t\t\tnavigator.msSaveBlob(dataUrlToBlob(payload), fileName) :\n\t\t\t\t\tsaver(payload) ; // everyone else can save dataURLs un-processed\n\t\t\t}\n\t\t\t\n\t\t}else{//not data url, is it a string with special needs?\n\t\t\tif(/([\\x80-\\xff])/.test(payload)){\t\t\t  \n\t\t\t\tvar i=0, tempUiArr= new Uint8Array(payload.length), mx=tempUiArr.length;\n\t\t\t\tfor(i;i<mx;++i) tempUiArr[i]= payload.charCodeAt(i);\n\t\t\t \tpayload=new myBlob([tempUiArr], {type: mimeType});\n\t\t\t}\t\t  \n\t\t}\n\t\tblob = payload instanceof myBlob ?\n\t\t\tpayload :\n\t\t\tnew myBlob([payload], {type: mimeType}) ;\n\n\n\t\tfunction dataUrlToBlob(strUrl) {\n\t\t\tvar parts= strUrl.split(/[:;,]/),\n\t\t\ttype= parts[1],\n\t\t\tdecoder= parts[2] == \"base64\" ? atob : decodeURIComponent,\n\t\t\tbinData= decoder( parts.pop() ),\n\t\t\tmx= binData.length,\n\t\t\ti= 0,\n\t\t\tuiArr= new Uint8Array(mx);\n\n\t\t\tfor(i;i<mx;++i) uiArr[i]= binData.charCodeAt(i);\n\n\t\t\treturn new myBlob([uiArr], {type: type});\n\t\t }\n\n\t\tfunction saver(url, winMode){\n\n\t\t\tif ('download' in anchor) { //html5 A[download]\n\t\t\t\tanchor.href = url;\n\t\t\t\tanchor.setAttribute(\"download\", fileName);\n\t\t\t\tanchor.className = \"download-js-link\";\n\t\t\t\tanchor.innerHTML = \"downloading...\";\n\t\t\t\tanchor.style.display = \"none\";\n\t\t\t\tdocument.body.appendChild(anchor);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tanchor.click();\n\t\t\t\t\tdocument.body.removeChild(anchor);\n\t\t\t\t\tif(winMode===true){setTimeout(function(){ self.URL.revokeObjectURL(anchor.href);}, 250 );}\n\t\t\t\t}, 66);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// handle non-a[download] safari as best we can:\n\t\t\tif(/(Version)\\/(\\d+)\\.(\\d+)(?:\\.(\\d+))?.*Safari\\//.test(navigator.userAgent)) {\n\t\t\t\tif(/^data:/.test(url))\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t\tif(!window.open(url)){ // popup blocked, offer direct download:\n\t\t\t\t\tif(confirm(\"Displaying New Document\\n\\nUse Save As... to download, then click back to return to this page.\")){ location.href=url; }\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t//do iframe dataURL download (old ch+FF):\n\t\t\tvar f = document.createElement(\"iframe\");\n\t\t\tdocument.body.appendChild(f);\n\n\t\t\tif(!winMode && /^data:/.test(url)){ // force a mime that will download:\n\t\t\t\turl=\"data:\"+url.replace(/^data:([\\w\\/\\-\\+]+)/, defaultMime);\n\t\t\t}\n\t\t\tf.src=url;\n\t\t\tsetTimeout(function(){ document.body.removeChild(f); }, 333);\n\n\t\t}//end saver\n\n\n\n\n\t\tif (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)\n\t\t\treturn navigator.msSaveBlob(blob, fileName);\n\t\t}\n\n\t\tif(self.URL){ // simple fast and modern way using Blob and URL:\n\t\t\tsaver(self.URL.createObjectURL(blob), true);\n\t\t}else{\n\t\t\t// handle non-Blob()+non-URL browsers:\n\t\t\tif(typeof blob === \"string\" || blob.constructor===toString ){\n\t\t\t\ttry{\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \";base64,\"  +  self.btoa(blob)  );\n\t\t\t\t}catch(y){\n\t\t\t\t\treturn saver( \"data:\" +  mimeType   + \",\" + encodeURIComponent(blob)  );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Blob but not URL support:\n\t\t\treader=new FileReader();\n\t\t\treader.onload=function(e){\n\t\t\t\tsaver(this.result);\n\t\t\t};\n\t\t\treader.readAsDataURL(blob);\n\t\t}\n\t\treturn true;\n\t}; /* end download() */\n}));\n","'use strict';\n\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\n/* server only */\n, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n  if (typeof shadowMode !== 'boolean') {\n    createInjectorSSR = createInjector;\n    createInjector = shadowMode;\n    shadowMode = false;\n  } // Vue.extend constructor export interop.\n\n\n  var options = typeof script === 'function' ? script.options : script; // render functions\n\n  if (template && template.render) {\n    options.render = template.render;\n    options.staticRenderFns = template.staticRenderFns;\n    options._compiled = true; // functional template\n\n    if (isFunctionalTemplate) {\n      options.functional = true;\n    }\n  } // scopedId\n\n\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n\n  var hook;\n\n  if (moduleIdentifier) {\n    // server build\n    hook = function hook(context) {\n      // 2.3 injection\n      context = context || // cached call\n      this.$vnode && this.$vnode.ssrContext || // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      } // inject component styles\n\n\n      if (style) {\n        style.call(this, createInjectorSSR(context));\n      } // register component module identifier for async chunk inference\n\n\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    }; // used by ssr in case component is cached and beforeCreate\n    // never gets called\n\n\n    options._ssrRegister = hook;\n  } else if (style) {\n    hook = shadowMode ? function () {\n      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\n    } : function (context) {\n      style.call(this, createInjector(context));\n    };\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // register for functional component in vue file\n      var originalRender = options.render;\n\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n\n  return script;\n}\n\nmodule.exports = normalizeComponent;\n//# sourceMappingURL=normalize-component.js.map\n","<template>\n\t<div class=\"jd-reset jd-table\" :class=\"frameClasses\" :style=\"frameStyles\">\n\n\t\t<div v-if=\"setting.title !== null\" class=\"jd-layerTitle\">{{ setting.title }}</div>\n\n\t\t<!-- Layer: Highlight -->\n\t\t<div v-if=\"setting.highlight\" class=\"jd-layerHighlight jd-noneSelectable\" :style=\"layerHighlightStyles\"></div>\n\n\t\t<!-- Layer: Controls -->\n\t\t<div v-if=\"setting.controls\" class=\"jd-layerControl jd-noneSelectable\" :style=\"layerControlStyles\">\n\n\t\t\t<!-- Control: Search -->\n\t\t\t<div v-if=\"setting.search\" class=\"jd-controlSearch\" :class=\"controlSearchClasses\">\n\n\t\t\t\t<span @click=\"featureAction('Search')\" class=\"jd-controlItem\" :class=\"searchIconClasses\" :title=\"searchIconTitle\">\n\t\t\t\t\t<i  class=\"fas fa-search\"></i>\n\n\t\t\t\t\t<!-- Control: Get Started with Search Reminder -->\n\t\t\t\t\t<div v-if=\"gettingStarted && setting.startBySearchArrowSearch && !status.processingData && !loader\" class=\"jd-searchArrow\">\n\t\t\t\t\t{{ setting.startBySearchArrowSearchText }}\n\t\t\t\t</div>\n\t\t\t\t</span>\n\n\t\t\t\t<input v-show=\"feature.searching\" @keyup.enter=\"performSearch\" v-model=\"search.text\" type=\"search\" ref=\"searchField\" :placeholder=\"setting.searchPlaceHolder ? setting.searchPlaceHolder : 'Поиск ..'\" :disabled=\"status.processingData\">\n\n\t\t\t\t<span v-show=\"feature.searching && !search.searching\" @click=\"performSearch\" class=\"jd-controlItem jd-search\" :title=\"tr['PerformSearch']\">\n\t\t\t\t\t<i  class=\"fas fa-angle-right\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<span v-show=\"feature.searching && search.searching\" @click=\"clearSearch\" class=\"jd-controlItem jd-clearSearch\" :title=\"tr['ClearSearch']\">\n\t\t\t\t\t<i  class=\"fas fa-times-circle\"></i>\n\t\t\t\t</span>\n\n\t\t\t</div>\n\n\t\t\t<!-- Control: Feature -->\n\t\t\t<div class=\"jd-controlFeature\" :class=\"controlFeatureClasses\">\n\n\t\t\t\t<!-- Feature: Add New -->\n\t\t\t\t<span v-if=\"setting.addNew\" @click=\"featureAction('AddNew')\" class=\"jd-controlItem\">\n\t\t\t\t\t<i class=\"fas fa-plus-square\" :title=\"tr['AddNew']\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Refresh -->\n\t\t\t\t<span v-if=\"setting.refresh\" @click=\"featureAction('Refresh')\" class=\"jd-controlItem\">\n\t\t\t\t\t<i class=\"fas fa-sync-alt\" :title=\"tr['Refresh']\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Pagination Select -->\n\t\t\t\t<span v-if=\"rendering.engine === 2\" @click=\"featureAction('Pagination')\" class=\"jd-controlItem\" :class=\"rendering.pagination.changingRows ? 'jd-selected' : ''\">\n\t\t\t\t\t<i class=\"fas fa-scroll\" :title=\"tr['RowsPerPage']\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Column Select -->\n\t\t\t\t<span v-if=\"setting.columnSelect\" @click=\"featureAction('Columns')\" class=\"jd-controlItem\" :class=\"columns.selecting ? 'jd-selected' : ''\">\n\t\t\t\t\t<i class=\"fas fa-columns\" :title=\"tr['Columns']\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Filter -->\n\t\t\t\t<span v-if=\"setting.filter\" @click=\"featureAction('Filter')\" class=\"jd-controlItem\" :class=\"controlFilterClasses\">\n\t\t\t\t\t<i class=\"fas fa-filter\" :title=\"tr['Filter']\"></i>\n\n\t\t\t\t\t<!-- Control: Get Started with Filter Reminder -->\n\t\t\t\t\t<div v-if=\"gettingStarted && setting.startBySearchArrowFilter && !menuVisible && !status.processingData && !loader\" class=\"jd-filterArrow\">\n\t\t\t\t\t\t{{ setting.startBySearchArrowFilterText }}\n\t\t\t\t\t</div>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: View -->\n\t\t\t\t<span v-if=\"setting.views.length > 0\" @click=\"featureAction('View')\" class=\"jd-controlItem\">\n\t\t\t\t\t<i class=\"far fa-eye\" title=\"View\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Export -->\n\t\t\t\t<span v-if=\"setting.export\" @click=\"featureAction('Export')\" class=\"jd-controlItem\">\n\t\t\t\t\t<i class=\"fas fa-file-export\" :title=\"tr['ExporttoExcel']\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Maximize/Minimize -->\n\t\t\t\t<span v-if=\"setting.maxMinimize && !setting.forceMaximized\" @click=\"featureAction('MaxMinimize')\" class=\"jd-controlItem\">\n\t\t\t\t\t<i :class=\"minMaxIconClasses\" :title=\"minMaxIconTitle\"></i>\n\t\t\t\t</span>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- Layer: Options -->\n\t\t<div class=\"jd-layerOption\" :style=\"layerOptionStyles\">\n\n\t\t\t<!-- Option: Pagination -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"rendering.pagination.changingRows\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">{{ tr['RowsPerPage'] }}</div>\n\n\t\t\t\t\t<!-- Pagination Row List -->\n\t\t\t\t\t<div v-for=\"rows in rendering.pagination.pageRowOptions\" @click=\"changePageRows( rows )\" class=\"jd-dropdownItem jd-paginationItem jd-clickable\" :class=\"rendering.pagination.currentSelectedPageRowOption === rows ? 'jd-selected' : ''\">\n\t\t\t\t\t\t{{ rows }}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t\t<!-- Option: Column -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"columns.selecting\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">{{ tr['Columns'] }}</div>\n\n\t\t\t\t\t<!-- Error -->\n\t\t\t\t\t<div v-if=\"columns.selectionError\" class=\"jd-errorMessage\">Вы должны включить хотя бы один столбец.</div>\n\n\t\t\t\t\t<!-- Column List -->\n\t\t\t\t\t<div v-for=\"column in columns.list\" @click=\"columnSelection( column )\" class=\"jd-dropdownItem jd-clickable\">\n\n\t\t\t\t\t\t<div class=\"jd-columnVisibility\">\n\t\t\t\t\t\t\t<i v-if=\"column.enabled\" class=\"fas fa-eye\"></i>\n\t\t\t\t\t\t\t<i v-else class=\"fas fa-eye-slash jd-notVisible\"></i>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"jd-columnTitle\">\n\t\t\t\t\t\t\t{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t\t<!-- Option: Filtering -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"filters.show\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">{{ tr['Filtering'] }}</div>\n\n\t\t\t\t\t<!-- Error -->\n\t\t\t\t\t<div v-if=\"filters.error\" class=\"jd-errorMessage\">{{ filters.errorText }}</div>\n\n\t\t\t\t\t<!-- Select Column Input -->\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-carrot jd-clickable\">\n\t\t\t\t\t\t<div @click=\"filterDropdown(0)\" class=\"jd-label\">\n\t\t\t\t\t\t\t<span>{{ filterColumnText.replace(/(<([^>]+)>)/ig,\"\") }}</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<transition name=\"jdTableFade\">\n\t\t\t\t\t\t\t<ul v-if=\"filters.activeDropdown === 0\" id=\"filterDropDownMenu\">\n\t\t\t\t\t\t\t\t<li v-for=\"( column, index ) in filterableColumns\" @click=\"buildFilter( 0, index )\">\n\t\t\t\t\t\t\t\t\t{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Select Filter Input -->\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-carrot jd-clickable\">\n\t\t\t\t\t\t<div @click=\"filterDropdown(1)\" class=\"jd-label\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{{ filterOptionText }}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<transition name=\"jdTableFade\">\n\t\t\t\t\t\t\t<ul v-if=\"filters.activeDropdown === 1\">\n\t\t\t\t\t\t\t\t<li v-for=\"( option, index ) in filterableOptions\" @click=\"buildFilter( 1, option )\">\n\t\t\t\t\t\t\t\t\t{{ option }}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Select Value Input -->\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-addPadding\">\n\t\t\t\t\t\t<input @keyup.enter=\"addFilter\" ref=\"filterInput\" type=\"text\" @input=\"filters.error = false\" v-model=\"filters.beingBuilt.value\" :placeholder=\"tr['Value']\"/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Filter Apply Buttons -->\n\t\t\t\t\t<div class=\"jd-dropdownRow jd-separate\">\n\t\t\t\t\t\t<button v-on:click=\"clearAllFilters\" type=\"button\" class=\"jd-button jd-danger\" :title=\"tr['ClearAllFilters']\">{{ tr['Clear'] }}</button>\n\t\t\t\t\t\t<button v-on:click=\"addFilter\" type=\"button\" class=\"jd-button jd-success\" :title=\"tr['ApplyFilter']\">{{ tr['Apply'] }}</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"jd-dropdownHeader jd-subHeader\">{{ tr['ActiveFilters'] }}</div>\n\n\t\t\t\t\t<!-- Filtered Results -->\n\t\t\t\t\t<div class=\"jd-dropdownHeader jd-smallHeader\">{{ tr['FilteredResults'] }}: {{ formatNumberWithCommas ( processedDataSize ) }}</div>\n\n\t\t\t\t\t<!-- Active Filters -->\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-disabled\" v-for=\"( filter, index ) in filters.active\">\n\t\t\t\t\t\t<div class=\"jd-label\" :title=\"filter.column.title.replace(/(<([^>]+)>)/ig,'') + ' .. ' + filter.option + ' .. ' + filter.value\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{{ filter.column.title.replace(/(<([^>]+)>)/ig,\"\") }}\n\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Равно'\" class=\"fas fa-equals\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Не равно'\" class=\"fas fa-not-equal\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Больше / Равно'\" class=\"fas fa-greater-than-equal\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Меньше / Равно'\" class=\"fas fa-less-than-equal\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Содержит'\" class=\"fas fa-level-down-alt\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Начинается с'\" class=\"fas fa-long-arrow-alt-right\"></i>\n\n\t\t\t\t\t\t\t\t\"{{ filter.value }}\"\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<i v-on:click=\"removeFilter( index )\" class=\"fas fa-minus-circle jd-removeIcon jd-clickable\" :title=\"tr['RemoveFilter']\"></i>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t\t<!-- Option: View -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"rendering.views.changingViews\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">Views</div>\n\n\t\t\t\t\t<!-- View List -->\n\t\t\t\t\t<div v-for=\"row in rendering.views.list\" @click=\"changeViews( row )\" class=\"jd-dropdownItem jd-paginationItem jd-clickable\" :class=\"rendering.views.currentSelectedView === row.viewName ? 'jd-selected' : ''\">\n\t\t\t\t\t\t{{ row.viewName }}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t</div>\n\n\t\t<!-- Layer: Content -->\n\t\t<div class=\"jd-layerContent\" ref=\"contentFrame\" :style=\"layerContentStyles\">\n\n\t\t\t<!-- Table Content: Table -->\n\t\t\t<div class=\"jd-contentTable\" :style=\"tableStyles\">\n\n\t\t\t\t<!-- Table: Head -->\n\t\t\t\t<div class=\"jd-head\" :style=\"tableHeadStyles\">\n\n\t\t\t\t\t<div v-for=\"( column, index ) in rendering.views.currentView.schema\" v-if=\"column.enabled\" @click=\"changeSort( index, column.name, column.sortSpecial )\" :title=\"sortTitle( index )\" class=\"jd-cell\" :class=\"columns.activeHoverIndex === index ? ( 'jd-hoverAssist' + headCellClasses) : headCellClasses\" :style=\"column.headerStyles\">\n\n\t\t\t\t\t\t<div class=\"jd-cellText\">\n\t\t\t\t\t\t\t<div class=\"jd-title\" v-html=\"column.title\"></div>\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex === index && !columns.activeSortAsc\" class=\"fas fa-sort-alpha-up\"></i>\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex === index && columns.activeSortAsc\" class=\"fas fa-sort-alpha-down\"></i>\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex !== index\" class=\"fas fa-sort-alpha-down jd-hoverSort\"></i>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div v-if=\"resizable\" class=\"jd-resize\" @mousedown=\"resizeStart( index, $event )\" @mousemove=\"resizeDrag( index, $event )\" :class=\"index === columns.activeResize ? 'jd-selected' : ''\"></div>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<!-- Table Body -->\n\t\t\t\t<div class=\"jd-body\" ref=\"bodyData\" :style=\"tableBodyStyles\" @scroll=\"virtualScroll( $event )\" @mouseleave=\"bodyLeave\">\n\n\t\t\t\t\t<div v-if=\"rendering.engine === 0\" class=\"jd-virtualBody\" :style=\"bodyVirtualStyles\"></div>\n\n\t\t\t\t\t<div ref=\"viewData\" :style=\"bodyViewStyles\">\n\t\t\t\t\t\t<div v-if=\"isViewAvailable\" v-for=\"row in currentTableData\" @click=\"rowActionSingle( row.index )\" @dblclick=\"rowActionDouble( row.index )\" @mouseover=\"rowHover( row.index, $event )\" class=\"jd-row\" :class=\"viewRowClasses\" :style=\"viewRowStyles\">\n\t\t\t\t\t\t\t<div v-for=\"( column, columnIndex ) in rendering.views.currentView.schema\" v-if=\"column.enabled\" class=\"jd-cell\" :class=\"rowDataClasses\" @mouseover=\"cellHover( columnIndex )\" :style=\"column.dataStyles\">\n\t\t\t\t\t\t\t\t<!-- List Items -->\n\t\t\t\t\t\t\t\t<span v-if=\"column.type === 'Array'\">\n\t\t\t\t\t\t\t\t\t<ul class=\"jd-list\">\n\t\t\t\t\t\t\t\t\t\t<li v-for=\"item in row.data[column.name]\">\n\t\t\t\t\t\t\t\t\t\t\t{{ item }}\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<!-- String Items -->\n\t\t\t\t\t\t\t\t<span v-else>{{ row.data[column.name] }}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- Layer: Footer -->\n\t\t<div v-if=\"setting.footer\" class=\"jd-layerFooter jd-noneSelectable\" :style=\"layerFooterStyles\">\n\n\t\t\t<div v-if=\"rendering.engine === 2 && processedDataSize\" class=\"jd-pagination\">\n\t\t\t\t<div class=\"jd-paginationDirection jd-left\" :class=\"rendering.pagination.currentPage === 1 ? 'jd-disabled' : ''\">\n\t\t\t\t\t<i @click=\"paginationFirst\" class=\"fas fa-fast-backward jd-start\" :title=\"tr['FirstPage']\"></i>\n\t\t\t\t\t<i @click=\"paginationPrevious\" class=\"fas fa-backward\" :title=\"tr['PreviousPage']\"></i>\n\t\t\t\t</div>\n\n\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"jd-paginationRows\">\n\t\t\t\t\t{{ tr['Rows'] }}&nbsp;<span v-if=\"processedDataSize\">{{ rendering.pagination.currentStartIndex + 1 }} - {{ rendering.pagination.currentEndIndex }} of&nbsp;</span>{{ formatNumberWithCommas( processedDataSize ) }}\n\t\t\t\t</div>\n\t\t\t\t<div v-else class=\"jd-paginationRows\">\n\t\t\t\t\t<span v-if=\"processedDataSize\">{{ rendering.pagination.currentStartIndex + 1 }} - {{ rendering.pagination.currentEndIndex }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"jd-paginationArea\">\n\n\t\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"jd-paginationList\">\n\t\t\t\t\t\t<div v-if=\"rendering.pagination.leftPages[0] > 1\" class=\"jd-paginationPage\">\n\t\t\t\t\t\t\t<i class=\"fas fa-ellipsis-h\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-for=\"page in rendering.pagination.leftPages\" @click=\"paginationChange( page )\" class=\"jd-paginationPage jd-addHover\" :class=\"page === rendering.pagination.currentPageHightlight ? 'jd-selected' : ''\">\n\t\t\t\t\t\t\t<span>{{ page }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"jd-paginationList\">\n\t\t\t\t\t\t<div v-for=\"page in rendering.pagination.rightPages\" @click=\"paginationChange( page )\" class=\"jd-paginationPage jd-addHover\" :class=\"page === rendering.pagination.currentPageHightlight ? 'jd-selected' : ''\">\n\t\t\t\t\t\t\t<span>{{ page }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-if=\"rendering.pagination.rightPages[rendering.pagination.rightPages.length - 1] < rendering.pagination.availablePages\" class=\"jd-paginationPage\">\n\t\t\t\t\t\t\t<i class=\"fas fa-ellipsis-h\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"jd-paginationDirection jd-right\" :class=\"rendering.pagination.currentPage === rendering.pagination.availablePages ? 'jd-disabled' : ''\">\n\t\t\t\t\t<i @click=\"paginationNext\" class=\"fas fa-forward\" :title=\"tr['NextPage']\"></i>\n\t\t\t\t\t<i @click=\"paginationLast\" class=\"fas fa-fast-forward jd-end\" :title=\"tr['LastPage']\"></i>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t\t<div v-if=\"( rendering.engine === 0 || rendering.engine === 1 ) && processedDataSize\">\n\t\t\t\t<div class=\"jd-resultRows\" v-show=\"!filters.show\">Rows: {{ formatNumberWithCommas( processedDataSize ) }}</div>\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- Layer: Popup -->\n\t\t<transition name=\"jdTableFade\">\n\t\t\t<!-- Table Error -->\n\t\t\t<div v-if=\"status.tableError\" class=\"jd-layerPopup jd-fullFrame\">\n\t\t\t\t<div class=\"jd-errorMessage\">\n\t\t\t\t\t{{ status.tableError }}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- No Data Message -->\n\t\t\t<div v-if=\"noDataMessage\" class=\"jd-layerPopup jd-contentFrame\">\n\t\t\t\t<div class=\"jd-noDataFrame\">\n\t\t\t\t\t<div class=\"jd-title\">\n\t\t\t\t\t\tNo Data Available\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div v-if=\"filtering\" class=\"jd-filters\">\n\t\t\t\t\t\tTry changing your applied filters.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Loader -->\n\t\t\t<div v-if=\"loader\" class=\"jd-layerPopup jd-fullFrame jd-loader\">\n\t\t\t\t<div class=\"fulfilling-square-spinner\">\n\t\t\t\t\t<div class=\"spinner-inner\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"jd-loadingText\">Loading ...</span>\n\t\t\t</div>\n\n\t\t\t<!-- Processing -->\n\t\t\t<div v-if=\"status.processingData\" class=\"jd-layerPopup jd-contentFrame jd-loader\">\n\t\t\t\t<div class=\"fulfilling-square-spinner\">\n\t\t\t\t\t<div class=\"spinner-inner\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"jd-loadingText\">Processing</span>\n\t\t\t</div>\n\n\t\t\t<!-- Searching -->\n\t\t\t<div v-if=\"status.searching\" class=\"jd-layerPopup jd-contentFrame jd-loader\">\n\t\t\t\t<div class=\"self-building-square-spinner\">\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t\t<div class=\"square clear\"></div>\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t\t<div class=\"square clear\"></div>\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t\t<div class=\"square\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"jd-loadingText\">Searching</span>\n\t\t\t</div>\n\n\t\t\t<!-- Updating -->\n\t\t\t<div v-if=\"status.updatingPage\" class=\"jd-layerPopup jd-contentFrame jd-loader\">\n\t\t\t\t<div class=\"looping-rhombuses-spinner\">\n\t\t\t\t\t<div class=\"rhombus\"></div>\n\t\t\t\t\t<div class=\"rhombus\"></div>\n\t\t\t\t\t<div class=\"rhombus\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"jd-loadingText\">Updating</span>\n\t\t\t</div>\n\n\t\t\t<!-- Get Started Messaging -->\n\t\t\t<div v-if=\"gettingStarted\" class=\"jd-layerPopup jd-contentFrame\">\n\t\t\t\t<div class=\"jd-tableMessage\" v-html=\"setting.startBySearchMessage\"></div>\n\t\t\t</div>\n\t\t</transition>\n\n\t\t<!-- Layer: Quick View -->\n\t\t<transition name=\"jdTableFade\">\n\t\t\t<div v-if=\"row.selectedIndex !== null && !status.processingData && !status.searching && !status.updatingPage\" class=\"jd-layerPopup jd-fullBrowser jd-fullFrame jd-fullFrameZone\">\n\n\t\t\t\t<div class=\"jd-quickView\">\n\n\t\t\t\t\t<div class=\"jd-quickViewHighlight_1\"></div>\n\t\t\t\t\t<div class=\"jd-quickViewHighlight_2\"></div>\n\n\t\t\t\t\t<div class=\"jd-quickViewControl\">\n\t\t\t\t\t\t<div class=\"jd-controlAction\">\n\t\t\t\t\t\t\t<span @click=\"print('quickViewContent')\" >\n\t\t\t\t\t\t\t\t<i class=\"fas fa-print\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span v-if=\"setting.viewItem\" @click=\"featureAction('ViewItem')\">\n\t\t\t\t\t\t\t\t<i class=\"far fa-arrow-alt-circle-up\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"jd-controlTitle\">Quick View</div>\n\n\t\t\t\t\t\t<div class=\"jd-controlAction\">\n\t\t\t\t\t\t\t<span v-if=\"setting.deleteItem\" @click=\"featureAction('DeleteItem')\">\n\t\t\t\t\t\t\t\t<i class=\"fas fa-trash-alt\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span v-if=\"setting.editItem\" @click=\"featureAction('EditItem')\">\n\t\t\t\t\t\t\t\t<i class=\"fas fa-pencil-alt\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span @click=\"quickViewClose\">\n\t\t\t\t\t\t\t\t<i class=\"fas fa-times\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div ref=\"quickViewContent\" class=\"jd-quickViewContent\">\n\t\t\t\t\t\t<div v-for=\"column in columns.list\" class=\"jd-contentRow\">\n\t\t\t\t\t\t\t<div class=\"jd-rowTitle\">{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}</div>\n\n\t\t\t\t\t\t\t<!-- List Items -->\n\t\t\t\t\t\t\t<div v-if=\"column.type === 'Array'\" class=\"jd-rowData\">\n\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t<li v-for=\"item in data[row.selectedIndex][column.name]\">\n\t\t\t\t\t\t\t\t\t\t{{ item }}\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- String Items -->\n\t\t\t\t\t\t\t<div v-else class=\"jd-rowData\">{{ data[row.selectedIndex][column.name] }}</div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"jd-quickViewFooter\">\n\t\t\t\t\t\t<div @click=\"quickViewPrevious\" class=\"jd-footerDirection jd-previous\">\n\t\t\t\t\t\t\t<i class=\"fas fa-backward\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-if=\"setting.dataProvider === 1\" class=\"jd-footerItem\">\n\t\t\t\t\t\t\t{{ row.selectedIndex + rendering.pagination.currentStartIndex + 1 }} of {{ processedDataSize }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-else class=\"jd-footerItem\">\n\t\t\t\t\t\t\t{{ row.selectedIndex + 1 }} of {{ processedDataSize }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div @click=\"quickViewNext\" class=\"jd-footerDirection jd-next\">\n\t\t\t\t\t\t\t<i class=\"fas fa-forward\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t</transition>\n\n\t\t<!-- Layer: Right Click / Context Menu -->\n\t\t<transition name=\"jdTableFade\">\n\t\t\t<div v-show=\"( setting.contextMenuLeft || setting.contextMenuRight ) && status.contextMenu\" class=\"jd-contextMenu\" ref=\"jd_contextMenu\">\n\t\t\t\t<ul class=\"jd-contextMenuOptions\">\n\t\t\t\t\t<li v-if=\"setting.contextMenuQuickView || setting.contextMenuView || setting.contextMenuEdit || setting.contextMenuDelete\" class=\"jd-contextMenuHeader jd-noneSelectable\">\n\t\t\t\t\t\t<span>Row Options</span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"setting.contextMenuQuickView\" @click=\"contextQuickView\" class=\"jd-contextMenuOption jd-noneSelectable\" :title=\"tr['OpenQuickView']\">\n\t\t\t\t\t\t<span>Quick View</span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"setting.contextMenuView\"  class=\"jd-contextMenuOption jd-noneSelectable\">\n\t\t\t\t\t\t<span @click=\"contextView(false)\" :title=\"tr['ViewRecord']\">{{ tr['ViewRecord'] }}</span>\n\t\t\t\t\t\t<span @click=\"contextView(true)\" title=\"View (In New Window)\"><i class=\"fas fa-external-link-alt\"></i></span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"setting.contextMenuEdit\" class=\"jd-contextMenuOption jd-noneSelectable\">\n\t\t\t\t\t\t<span @click=\"contextEdit(false)\" :title=\"tr['EditRecord']\">{{ tr['EditRecord'] }}</span>\n\t\t\t\t\t\t<span @click=\"contextEdit(true)\" title=\"Edit (In New Window)\"><i class=\"fas fa-external-link-alt\"></i></span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"setting.contextMenuDelete\" class=\"jd-contextMenuOption jd-noneSelectable\">\n\t\t\t\t\t\t<span @click=\"contextDelete\" :title=\"tr['DeleteRecord']\"> {{ tr['DeleteRecord'] }}</span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"setting.contextMenuAdd\" class=\"jd-contextMenuHeader jd-noneSelectable\">\n\t\t\t\t\t\t<span>Table Options</span>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li v-if=\"setting.contextMenuAdd\" class=\"jd-contextMenuOption jd-noneSelectable\">\n\t\t\t\t\t\t<span @click=\"contextAdd(false)\" :title=\"tr['AddRecord']\">Add</span>\n\t\t\t\t\t\t<span @click=\"contextAdd(true)\" title=\"Add (In New Window)\"><i class=\"fas fa-external-link-alt\"></i></span>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</transition>\n\t</div>\n</template>\n\n<script>\n\timport download from \"downloadjs\";\n\texport default\n\t{\n\t\tname : 'JDTable',\n\n\t\tdata ()\n\t\t{\n\t\t\treturn {\n\t\t\t\ttr:{\n\t\t\t\t\tRefresh: 'Обновить',\n\t\t\t\t\tRowsPerPage: 'Строк на странице',\n\t\t\t\t\tColumns: 'Настроить столбцы',\n\t\t\t\t\tFilter: 'Фильтры',\n\t\t\t\t\tExporttoExcel:'Экспорт в Exсel',\n\t\t\t\t\tAddNew: 'Добавить',\n\t\t\t\t\tClearAllFilters: 'Сбросить фильтры',\n\t\t\t\t\tApplyFilter:'Добавить фильтр',\n\t\t\t\t\tClear: 'Сбросить',\n\t\t\t\t\tApply:'Добавить',\n\t\t\t\t\tPerformSearch: 'Выполнить поиск',\n\t\t\t\t\tClearSearch: 'Очистить поиск',\n\t\t\t\t\tViewRecord: 'Посмотреть',\n\t\t\t\t\tEditRecord: 'Редактировать',\n\t\t\t\t\tDeleteRecord: 'Удалить',\n\t\t\t\t\tAddRecord: 'Добавить',\n\t\t\t\t\tOpenQuickView: 'Быстрый просмотр',\n\t\t\t\t\tFiltering: 'Фильтрация',\n\t\t\t\t\tRemoveFilter: 'Удалить фильтр',\n\t\t\t\t\tActiveFilters: 'Активные фильтры',\n\t\t\t\t\tFilteredResults: 'Результат фильтрации',\n\t\t\t\t\tRows: 'Строк',\n\t\t\t\t\tFirstPage: 'Первая страница',\n\t\t\t\t\tPreviousPage: 'Предыдущая страница',\n\t\t\t\t\tNextPage: 'Следующая страница',\n\t\t\t\t\tLastPage: 'Последняя страница',\n\t\t\t\t\tValue: 'Значение'\n\t\t\t\t},\n\t\t\t\tstatus :\n\t\t\t\t{\n\t\t\t\t\ttableError     : null,\n\t\t\t\t\tgetStarted     : false,\n\t\t\t\t\tprocessingData : false,\n\t\t\t\t\tupdatingPage   : false,\n\t\t\t\t\tsearching      : false,\n\t\t\t\t\tmobileSize     : false,\n\t\t\t\t\tisIE11         : false,\n\t\t\t\t\ttableScroll    : false,\n\t\t\t\t\tlastAction     : null,\n\t\t\t\t\tcontextMenu    : false,\n\t\t\t\t\ttableReady     : false\n\t\t\t\t},\n\n\t\t\t\tcurrentTableData : [],\n\t\t\t\tdata             : [],\n\n\t\t\t\tfeature :\n\t\t\t\t{\n\t\t\t\t\tmaximized : false,\n\t\t\t\t\tsearching : false\n\t\t\t\t},\n\n\t\t\t\trendering :\n\t\t\t\t{\n\t\t\t\t\tengine            : 0,\n\t\t\t\t\tisScrolling       : null,\n\t\t\t\t\tresettingScroll   : false,\n\t\t\t\t\tcontentFrameWidth : null,\n\t\t\t\t\tisResizing        : null,\n\t\t\t\t\tpagination        :\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentPage                  : null,\n\t\t\t\t\t\tcurrentPageHightlight        : null,\n\t\t\t\t\t\tcurrentStartIndex            : null,\n\t\t\t\t\t\tcurrentEndIndex              : null,\n\t\t\t\t\t\tavailablePages               : null,\n\t\t\t\t\t\tcurrentPageRows              : null,\n\t\t\t\t\t\tpageRowOptions               : [],\n\t\t\t\t\t\tchangingRows                 : false,\n\t\t\t\t\t\tleftPages                    : [],\n\t\t\t\t\t\trightPages                   : [],\n\t\t\t\t\t\tcurrentSelectedPageRowOption : null,\n\t\t\t\t\t},\n\t\t\t\t\tvirtual :\n\t\t\t\t\t{\n\t\t\t\t\t\trowMiddleIndex          : 0,\n\t\t\t\t\t\trowTopIndex             : 0,\n\t\t\t\t\t\trowBottomIndex          : 0,\n\t\t\t\t\t\ttriggerTopPositionPX    : null,\n\t\t\t\t\t\ttriggerBottomPositionPX : null,\n\t\t\t\t\t\theight                  : null,\n\t\t\t\t\t\tvirtualBufferSize       : 5\n\t\t\t\t\t},\n\t\t\t\t\texternal :\n\t\t\t\t\t{\n\t\t\t\t\t\tdataSize : null\n\t\t\t\t\t},\n\t\t\t\t\tviews :\n\t\t\t\t\t{\n\t\t\t\t\t\tchangingViews       : false,\n\t\t\t\t\t\tcurrentSelectedView : null,\n\t\t\t\t\t\tlist                : [],\n\t\t\t\t\t\tcurrentView         : []\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tprocessedData : [],\n\n\t\t\t\trow :\n\t\t\t\t{\n\t\t\t\t\tselectedIndex        : null,\n\t\t\t\t\tactiveHoverIndex     : null,\n\t\t\t\t\tactiveHoverElement   : null,\n\t\t\t\t\tactiveContextIndex   : null,\n\t\t\t\t\tactiveContextElement : null\n\t\t\t\t},\n\n\t\t\t\tcolumns :\n\t\t\t\t{\n\t\t\t\t\tlist               : [],\n\t\t\t\t\tactiveHoverIndex   : null,\n\t\t\t\t\tactiveResize       : null,\n\t\t\t\t\tactiveResizeStart  : null,\n\t\t\t\t\tactiveSortIndex    : 0,\n\t\t\t\t\tactiveSortName     : null,\n\t\t\t\t\tactiveSortAsc      : false,\n\t\t\t\t\tactiveSortSpecial  : null,\n\t\t\t\t\tselecting          : false,\n\t\t\t\t\tselectionItemWidth : 25,\n\t\t\t\t\tselectionError     : false\n\t\t\t\t},\n\n\t\t\t\tsearch :\n\t\t\t\t{\n\t\t\t\t\ttext      : '',\n\t\t\t\t\tsearching : false\n\t\t\t\t},\n\n\t\t\t\tfilters :\n\t\t\t\t{\n\t\t\t\t\tshow           : false,\n\t\t\t\t\tactive         : [],\n\t\t\t\t\tactiveDropdown : null,\n\t\t\t\t\terror          : false,\n\t\t\t\t\terrorText      : '',\n\t\t\t\t\tbeingBuilt     :\n\t\t\t\t\t{\n\t\t\t\t\t\tcolumn : null,\n\t\t\t\t\t\toption : null,\n\t\t\t\t\t\tvalue  : null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// ---------------\n\t\t// Component Props\n\t\t// ---------------\n\t\t//\n\t\t// OPTIONS ----\n\t\t//\n\t\t// Prop        : option.dataProvider\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 0\n\t\t// Description : Sets the manner of which data will be provided to JD-Table.\n\t\t//\n\t\t// -----\n\t\t// | 0 | FULL    : All data will be provided as one single injection to the table. Search/filtering will be performed on that data by JD-Table.\n\t\t// | 1 | REQUEST : All data will be provided via external requests for all data based actions (search, filtering, pagination, sorting, etc.).\n\t\t// -----         : These data based actions will instead emit events to the parent app for processing.\n\t\t//\n\t\t// Prop        : option.columns\n\t\t// Value       : [ARRAY]\n\t\t// Default     : Empty\n\t\t// Description : An array of objects which configure the columns of the table.\n\t\t// Format      : [\n\t\t//\t\t\t\t \t{\n\t\t//\t\t\t\t\t\tname          : [STRING] name of the column in the JSON data.\n\t\t//\t\t\t\t\t\ttitle         : [STRING] title used in the table header.\n\t\t//\t\t\t\t\t\twidth         : [NUMBER] used for the width of the column.\n\t\t//\t\t\t\t\t\t\t          : When option.responsiveTable = FALSE --> Width provided will be PX.\n\t\t//                                    : When option.responsiveTable = TRUE --> Width provided will be %.\n\t\t//\t \t\t\t\t\torder         : [NUMBER] which defines the order of columns from left to right.\n\t\t//                      sort          : [BOOLEAN] sets the column as the initially sorted column.\n\t\t// \t\t\t\t\t    sortDirection : [STRING] sets the direction of the initially sorted column: 'desc' or 'asc'.\n\t\t// \t\t\t\t\t\ttype          : [STRING] which defines the type of data in the column. Options are: 'String' and 'Number'.\n\t\t// \t\t\t\t\t\tfilterable    : [BOOLEAN] which determines if the column can be filtered.\n\t\t// \t\t\t\t\t\tenabled       : [BOOLEAN] which determines if the column is shown/enabled on initial load.\n\t\t//\t\t\t\t\t}\n\t\t//               ]\n\t\t//\n\t\t// Prop        : startBySearch\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables the startBySearchMessage when search text or a filter are not applied.\n\t\t//             : This is useful for large dataset's where you don't want to load the entire DB.\n\t\t//             : Instead, this prompts the user to search or apply a filter to view any data.\n\t\t//\n\t\t// Prop        : startBySearchMessage\n\t\t// Value       : [STRING]\n\t\t// Default     : NULL\n\t\t// Description : Message which will be displayed when no search/filter is being applied.\n\t\t//\n\t\t// Prop        : startBySearchArrowSearch\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : When startBySearchMessage is active, displays a pointer to the search box.\n\t\t//\n\t\t// Prop        : startBySearchArrowFilter\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : When startBySearchMessage is active, displays a pointer to the filter box.\n\t\t//\n\t\t// Prop        : startBySearchArrowSearchText\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : Text to be displayed when startBySearchArrorSearch is enabled.\n\t\t//\n\t\t// Prop        : startBySearchArrowFilterText\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : Text to be displayed when startBySearchArrorFilter is enabled.\n\t\t//\n\t\t// Prop        : option.maxMinimize\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the min/maximize feature button.\n\t\t//\n\t\t// Prop        : option.addNew\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables the Add New feature button.\n\t\t//\n\t\t// Prop        : option.editItem\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables the Edit Item feature button (quick view).\n\t\t//\n\t\t// Prop        : option.viewItem\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables the View Item feature button (quick view).\n\t\t//\n\t\t// Prop        : option.deleteItem\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables the Delete Item feature button (quick view).\n\t\t//\n\t\t// Prop        : option.refresh\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the refresh feature button.\n\t\t//\n\t\t// Prop        : option.search\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the search feature button/input.\n\t\t//\n\t\t// Prop        : option.columnSelect\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the column select feature.\n\t\t//\n\t\t// Prop        : option.resize\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables resizing of columns. Only works when responsiveTable is set to FALSE.\n\t\t//\n\t\t// Prop        : option.filter\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the filter feature.\n\t\t//\n\t\t// Prop        : option.export\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the export to excel feature. Not compatible with IE11 or lower.\n\t\t//\n\t\t// Prop        : option.exportLimit\n\t\t// Value       : [NUMBER]\n\t\t// Default     : null (ALL)\n\t\t// Description : Sets a restriction on how many records can be exported via Excel.\n\t\t//\n\t\t// Prop        : option.columnSort\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the ability to sort by column.\n\t\t//\n\t\t// Prop        : option.quickView\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 1\n\t\t// Description : Enables/disables the ability to click or double click a row to see the quick view.\n\t\t//\n\t\t// -----\n\t\t// | 0 | NONE         : Disables quick view.\n\t\t// | 1 | CLICK        : Quick view appears on single (left) click.\n\t\t// | 2 | DOUBLE CLICK : Quick view appears on double (left) click.\n\t\t// -----\n\t\t//\n\t\t// Prop        : option.contextMenu\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables a row context menu for when a user right clicks on a row.\n\t\t//\n\t\t// Prop        : option.contextMenuQuickView\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the row context menu option for Quick Viewing the row data.\n\t\t//\n\t\t// Prop        : option.contextMenuView\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the row context menu option for Viewing the row data.\n\t\t//\n\t\t// Prop        : option.contextMenuEdit\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the row context menu option for Editing the row data.\n\t\t//\n\t\t// Prop        : option.contextMenuDelete\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the row context menu option for Delete the row data.\n\t\t//\n\t\t// Prop        : option.contextMenuAdd\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the row context menu option for Adding a row of data.\n\t\t//\n\t\t// Prop        : option.renderEngine\n\t\t// Value       : [NUMBER]\n\t\t// Default     : NULL\n\t\t// Description : Selects the rendering engine JD-Table uses when rendering rows of data.\n\t\t//\n\t\t// -----\n\t\t// | 0 | VIRTUAL    : Render only a small amount of rows based on the table view size. Use this for large tables.\n\t\t// | 1 | ALL        : Render all rows regardless of how many there are.\n\t\t// | 2 | PAGINATION : Render a specific number of rows and enables 'Next'/'Previous' buttons.\n\t\t// -----\n\t\t//\n\t\t// -------------------------------------\n\t\t// | responsiveFrame | responsiveTable |\n\t\t// | true            | true            | : Frame fits parent & columns are auto adjusted (%).\n\t\t// | true            | false           | : Frame fits parent to a min-width of sum of columns & column are set (PX) size.\n\t\t// | false           | true            | : Frame is set (PX) size & column are auto adjusted (%).\n\t\t// | false           | false           | : Frame is set (PX) size and columns are set (PX) size.\n\t\t// -------------------------------------\n\t\t//\n\t\t// Prop        : option.responsiveFrame\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Renders the entire JD-Table frame responsively or not.\n\t\t//\n\t\t// ---------\n\t\t// | TRUE  | : Renders the entire JD-Table responsively. It will fit to the parent container.\n\t\t// | FALSE | : Renders the entire JD-Table to the width set to the option.frameWidth in pixels.\n\t\t// ---------\n\t\t//\n\t\t// Prop        : option.responsiveFrameForceFullWidth\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : When responsiveFrame is set to true and the number of columns in the table shrink the entire table will as well\n\t\t//             : (according it its parent). However sometimes you want the table to be 100% no matter what. Set this option to\n\t\t//             : True and it will force the table to ignore column widths when the table shrinks.\n\t\t//\n\t\t// Prop        : option.responsiveTable\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Renders the data table within JD-Table responsively or not.\n\t\t//\n\t\t// ---------\n\t\t// | TRUE  | : Renders the data table responsively to the width of the entire JD-Table frame.\n\t\t// | FALSE | : Renders the data table according to the option.columns.width values for each column.\n\t\t// ---------\n\t\t//\n\t\t// Prop        : option.virtualEngineRowStart\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 250\n\t\t// Description : Indicates the amount of rows that if the data exceeds will trigger the virtual rendering engine.\n\t\t//             : Only used when renderEngine is set to 0 (auto).\n\t\t//\n\t\t// Prop        : option.frameWidth\n\t\t// Value       : [NUMBER]\n\t\t// Default     : Null\n\t\t// Description : A number value (PX) which will be assigned to the width of JD-Table when option.responsiveFrame is set to False.\n\t\t//\n\t\t// Prop        : option.headerHeight\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 40\n\t\t// Description : A number value (PX) which will applied to the table header row height.\n\t\t//\n\t\t// Prop        : option.dataHeight\n\t\t// Value       : [NUMBER]\n\t\t// Default     : NULL\n\t\t// Description : A number value (PX) which will applied to the data table body height. Null = 100%.\n\t\t//\n\t\t// Prop        : option.rowHeight\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 42\n\t\t// Description : A number value (PX) which will applied as the height for each data row.\n\t\t//\n\t\t// Prop        : option.paginationRowLimits\n\t\t// Value       : [ARRAY]\n\t\t// Default     : [20, 50, 100]\n\t\t// Description : Array of numbers that will be provided as options for how many rows appear per page (pagination engine).\n\t\t//\n\t\t// Prop        : option.paginationRowStart\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 20\n\t\t// Description : A number that will be used as the default selection for how many rows to appear per page (pagination engine).\n\t\t//\n\t\t// Prop        : option.paginationRowAll\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enable/disable the \"ALL\" option for how many rows to appear per page (pagination).\n\t\t//\n\t\t// Prop        : option.pageSideQuantity\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 5\n\t\t// Description : The number of page choices that will be available on either side of the row display on the footer. (pagination engine).\n\t\t//\n\t\t// Prop        : option.forceSearchOpen\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Force search to be open and cannot be closed.\n\t\t//\n\t\t// Prop        : option.searchPlaceHolder\n\t\t// Value       : [STRING]\n\t\t// Default     : NULL\n\t\t// Description : The placeholder text for the search input box.\n\t\t//\n\t\t// Prop        : option.startMaximized\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Renders the table maximized.\n\t\t//\n\t\t// Prop        : option.forceMaximized\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Renders the table maximized and removes the min/maximize button.\n\t\t//\n\t\t// Prop        : option.rowZebra\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Renders all even rows with a light background.\n\t\t//\n\t\t// Prop        : option.rowFlex\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Allows the row height to be flexible according to the data in the columns.\n\t\t//\n\t\t// Prop        : option.resizeForceMinWidth\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : When enabled, columns cannot be resized smaller then their initial option.column.width.\n\t\t// \t\t\t   : Only applies when option.resize is enabled.\n\t\t//\n\t\t// Prop        : option.highlight\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : true\n\t\t// Description : Renders the top highlight bar on the frame.\n\t\t//\n\t\t// Prop        : option.controls\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : true\n\t\t// Description : Renders the control bar.\n\t\t//\n\t\t// Prop        : option.footer\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : true\n\t\t// Description : Renders the footer. Must be true for pagination.\n\t\t//\n\t\t// Prop        : option.title\n\t\t// Value       : [STRING]\n\t\t// Default     : Null\n\t\t// Description : Display's a title at the top of the table.\n\t\t//\n\t\t// Prop        : option.views\n\t\t// Value       : [ARRAY]\n\t\t// Default     : Null\n\t\t// Description : List of available views that are in addition to the default. Each array item should be an object with column view details.\n\t\t//             : [\n\t\t//             :    {   // View #1\n\t\t//             :        viewName : 'My Awesome View',\n\t\t//             :        schema   :\n\t\t//             :        [\n\t\t//             :            {   // Column #1\n\t\t//\t\t\t   :\t        \tname          : [STRING] name of the column in the JSON data.\n\t\t//\t\t\t   :\t        \ttitle         : [STRING] title used in the table header.\n\t\t//\t\t\t   :\t        \twidth         : [NUMBER] used for the width of the column.\n\t\t//\t\t\t   :\t        \t\t          : When option.responsiveTable = FALSE --> Width provided will be PX.\n\t\t//             :                              : When option.responsiveTable = TRUE --> Width provided will be %.\n\t\t//\t \t\t   :\t        \torder         : [NUMBER] which defines the order of columns from left to right.\n\t\t//             :                sort          : [BOOLEAN] sets the column as the initially sorted column.\n\t\t// \t\t\t   :\t            sortDirection : [STRING] sets the direction of the initially sorted column: 'desc' or 'asc'.\n\t\t// \t\t\t   :\t        \ttype          : [STRING] which defines the type of data in the column. Options are: 'String' and 'Number'.\n\t\t// \t\t\t   :\t        \tfilterable    : [BOOLEAN] which determines if the column can be filtered.\n\t\t// \t\t\t   :\t        \tenabled       : [BOOLEAN] which determines if the column is shown/enabled on initial load.\n\t\t//             :            }, ...\n\t\t//             :        ]\n\t\t//             :    }, ...\n\t\t//             : ]\n\t\t//\n\t\t// EVENT ----\n\t\t//\n\t\t// Prop        : eventFromApp.name\n\t\t// Value       : [STRING]\n\t\t// Default     : ''\n\t\t// Description : Name of event you want to trigger on JD-Table.\n\t\t//\n\t\t// Prop        : eventFromApp.payload\n\t\t// Value       : [ANY]\n\t\t// Default     : NULL\n\t\t// Description : Optional payload for the event.\n\t\t//\n\t\t// Prop        : eventFromAppTrigger\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : FALSE\n\t\t// Description : Triggers the stored event in event.name/payload to execute.\n\n\t\tprops :\n\t\t{\n\t\t\toption :\n\t\t\t{\n\t\t\t\ttype    : Object,\n\t\t\t\tdefault : () => ({})\n\t\t\t},\n\n\t\t\teventFromApp :\n\t\t\t{\n\t\t\t\ttype    : Object,\n\t\t\t\tdefault : () =>\n\t\t\t\t({\n\t\t\t\t\tname    : null,\n\t\t\t\t\tpayload : null\n\t\t\t\t})\n\t\t\t},\n\n\t\t\teventFromAppTrigger :\n\t\t\t{\n\t\t\t\ttype    : Boolean,\n\t\t\t\tdefault : false\n\t\t\t},\n\n\t\t\tloader :\n\t\t\t{\n\t\t\t\ttype    : Boolean,\n\t\t\t\tdefault : true\n\t\t\t},\n\t\t\t\n\t\t\tworksheet: {\n\t\t\t\ttype: String, \n\t\t\t\tdefault: \"Sheet1\"\n\t\t\t}\n\t\t},\n\n\t\tcreated : function ()\n\t\t{\n\t\t\tthis.polyfillClosest();\n\n\t\t\tthis.checkBrowser();\n\n\t\t\tthis.initializeTable();\n\t\t},\n\n\t\tmounted : function ()\n\t\t{\n\t\t\t// Add an event listener to watch for a window resize. If detected, re-render the list.\n\t\t\twindow.addEventListener( 'resize', this.resizeListener );\n\n\t\t\tif ( this.setting.contextMenuLeft || this.setting.contextMenuRight )\n\t\t\t{\n\t\t\t\tthis.initializeContextMenu();\n\t\t\t}\n\n\t\t\tif ( this.setting.quickView )\n\t\t\t{\n\t\t\t\tthis.initializeQuickMenu();\n\t\t\t}\n\t\t},\n\n\t\t// Clean up custom listeners.\n\t\tbeforeDestroy : function ()\n\t\t{\n\t\t\t// Context Listener - LEFT CLICK\n\t\t\tif ( this.setting.contextMenuLeft || this.setting.contextMenuRight )\n\t\t\t{\n\t\t\t\twindow.removeEventListener( \"click\", this.contextListenerLeftClick );\n\t\t\t}\n\n\t\t\t// Context Listener - RIGHT CLICK\n\t\t\tif ( this.setting.contextMenuRight )\n\t\t\t{\n\t\t\t\t// Register context menu (right click) event.\n\t\t\t\twindow.removeEventListener( \"contextmenu\", this.contextListenerRightClick );\n\t\t\t}\n\n\t\t\t// Quick Menu Listener\n\t\t\twindow.removeEventListener( \"click\", this.quickMenuListenerLeftClick );\n\n\t\t\t// Filter Dropdown\n\t\t\twindow.removeEventListener( 'mouseup', this.clearFilterDropdown, false );\n\n\t\t\t// Resize Listeners\n\t\t\twindow.removeEventListener( 'resize', this.resizeListener );\n\t\t\twindow.removeEventListener( 'mouseup', this.resizeStop , false );\n\t\t},\n\n\t\tmethods :\n\t\t{\n\t\t    base64ToBlob(data, mime) {\n\t\t\t\t  let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\n\t\t\t\t  let bstr = atob(base64);\n\t\t\t\t  let n = bstr.length;\n\t\t\t\t  let u8arr = new Uint8ClampedArray(n);\n\t\t\t\t  while (n--) {\n\t\t\t\t\tu8arr[n] = bstr.charCodeAt(n);\n\t\t\t\t  }\n\t\t\t\t  return new Blob([u8arr], { type: mime });\n\t\t\t},\n\t\t\t\n\t\t\t// Polyfills the element function \"closest\" (IE11).\n\t\t\tpolyfillClosest : function ()\n\t\t\t{\n\t\t\t\tif ( window.Element && !Element.prototype.closest )\n\t\t\t\t{\n\t\t\t\t\tElement.prototype.closest = function ( s )\n\t\t\t\t\t{\n\t\t\t\t\t\tlet matches = ( this.document || this.ownerDocument ).querySelectorAll( s ), i, el = this;\n\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ti = matches.length;\n\t\t\t\t\t\t\twhile ( --i >= 0 && matches.item( i ) !== el ) {};\n\t\t\t\t\t\t} while ( (i < 0) && ( el = el.parentElement ) );\n\n\t\t\t\t\t\treturn el;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Configures the table according to the init props.\n\t\t\tinitializeTable : function ()\n\t\t\t{\n\t\t\t\t// Sets the rendering engine.\n\t\t\t\tconst INIT_ENGINE = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.engine = this.setting.renderEngine ? this.setting.renderEngine : 0;\n\t\t\t\t};\n\n\t\t\t\t// Create reactive column settings.\n\t\t\t\tconst INIT_COLUMNS = () =>\n\t\t\t\t{\n\t\t\t\t\t// Ensure columns are defined.\n\t\t\t\t\tif ( typeof( this.setting.columns ) === 'object' )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setting.columns.forEach( ( userColumn, index ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( typeof( userColumn.name ) !== 'string' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: неверные настройки. Один из определенных столбцов не имеет назначенного name.';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( typeof( userColumn.title ) !== 'string' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: неверные настройки. Один из определенных столбцов не имеет назначенного title.';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( typeof( userColumn.order ) !== 'number' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: неверные настройки. Один из определенных столбцов не имеет назначенного order.';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( typeof( userColumn.type ) !== 'string' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: неверные настройки. Один из определенных столбцов не имеет назначенного типа type.';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Set column width value.\n\t\t\t\t\t\t\tlet columnWidth = null;\n\n\t\t\t\t\t\t\tif ( typeof( userColumn.width ) === 'number' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolumnWidth = userColumn.width;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Set initial visibility value.\n\t\t\t\t\t\t\tlet enabled = true;\n\n\t\t\t\t\t\t\tif ( typeof( userColumn.enabled ) === 'boolean' && !userColumn.enabled )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tenabled = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Set filterable value.\n\t\t\t\t\t\t\tlet filterable = false;\n\n\t\t\t\t\t\t\tif ( typeof( userColumn.filterable ) === 'boolean' && userColumn.filterable )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfilterable = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.$set( this.columns.list, index,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname          : userColumn.name,\n\t\t\t\t\t\t\t\ttitle         : userColumn.title,\n\t\t\t\t\t\t\t\twidth         : columnWidth,\n\t\t\t\t\t\t\t\toriginalWidth : columnWidth,\n\t\t\t\t\t\t\t\torder         : userColumn.order,\n\t\t\t\t\t\t\t\ttype          : userColumn.type,\n\t\t\t\t\t\t\t\tfilterable    : filterable,\n\t\t\t\t\t\t\t\tenabled       : enabled,\n\t\t\t\t\t\t\t\theaderStyles  : {},\n\t\t\t\t\t\t\t\tdataStyles    : {},\n\t\t\t\t\t\t\t\tsort          : userColumn.sort ? userColumn.sort : false,\n\t\t\t\t\t\t\t\tsortDirection : userColumn.sortDirection ? userColumn.sortDirection : null,\n\t\t\t\t\t\t\t\tsortSpecial   : userColumn.sortSpecial ? userColumn.sortSpecial : null\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Sort the array based on the passed order.\n\t\t\t\t\t\tthis.columns.list.sort( ( a, b ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet viewLength = this.rendering.views.list.push\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tviewName : 'Default',\n\t\t\t\t\t\t\tschema   : []\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Create default view.\n\t\t\t\t\t\tthis.columns.list.forEach ( ( column ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( column.enabled )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.views.list[viewLength - 1].schema.push( column );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Sort the default view.\n\t\t\t\t\t\tthis.rendering.views.list[viewLength - 1].schema.sort( ( a, b ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Set the default view and active.\n\t\t\t\t\t\tthis.rendering.views.currentView = this.rendering.views.list[viewLength - 1];\n\n\t\t\t\t\t\tlet hasBeenSorted = false;\n\n\t\t\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( viewColumn, viewIndex ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Sets the column as default sorted.\n\t\t\t\t\t\t\tif ( viewColumn.sort )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.columns.activeSortIndex    = viewIndex;\n\t\t\t\t\t\t\t\tthis.columns.activeSortName     = viewColumn.name;\n\t\t\t\t\t\t\t\tthis.columns.activeSortSpecial  = viewColumn.sortSpecial;\n\n\t\t\t\t\t\t\t\tif ( typeof( viewColumn.sortDirection ) === 'string' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\n\n\t\t\t\t\t\t\t\t\tif ( viewColumn.sortDirection === 'asc' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.rendering.views.currentSelectedView = 'Default';\n\n\t\t\t\t\t\t// No sorting set, use first column.\n\t\t\t\t\t\tif ( !hasBeenSorted )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.columns.activeSortIndex    = 0;\n\t\t\t\t\t\t\tthis.columns.activeSortAsc      = true;\n\t\t\t\t\t\t\tthis.columns.activeSortName     = this.rendering.views.currentView.schema[0].name;\n\t\t\t\t\t\t\tthis.columns.activeSortSpecial  = this.rendering.views.currentView.schema[0].sortSpecial;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.status.tableError = 'Ошибка: неверные настройки. Столбцы не определены.'\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Determine maximized state.\n\t\t\t\tconst SETUP_MAXIMIZE = () =>\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.forceMaximized || this.setting.startMaximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.feature.maximized = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Check for table & column widths and calculate fixed table full width.\n\t\t\t\tconst SETUP_SIZES = () =>\n\t\t\t\t{\n\t\t\t\t\tlet noWidthColumns = 0;\n\n\t\t\t\t\t// Check how many columns have no width assigned.\n\t\t\t\t\tthis.columns.list.forEach( ( column ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( column.width === null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnoWidthColumns++;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// If the table should be responsive, but the sum of the widths is Greater/Equal To 100%. Throw an error.\n\t\t\t\t\tif ( this.setting.responsiveTable && this.tableWidth !== null && this.tableWidth > 100 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.status.tableError =  'Ошибка: неверные настройки. Сумма ширины отдельных столбцов превышает 100%. Убедитесь, что ваши столбцы сбалансированы.'\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !this.setting.responsiveFrame && this.setting.frameWidth === null )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.status.tableError =  'Ошибка: неверные настройки. Параметр frameWidth не настроен. Чтобы использовать responseiveTable = FALSE, вы должны установить frameWidth. Рамка теперь будет работать при 100% и работать неправильно.'\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the column width for each column.\n\t\t\t\t\tthis.columns.list.forEach( ( column, index ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// If the column has an assigned width ..\n\t\t\t\t\t\tif ( column.width !== null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// If the table is NOT responsive, the width is PX.\n\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', column.width + 'px' );\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'min-width', column.width + 'px' );\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'height', this.setting.headerHeight + 'px' );\n\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', column.width + 'px' );\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'min-width', column.width + 'px' );\n\n\t\t\t\t\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'min-height', this.setting.rowHeight + 'px' );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// If the table IS responsive, the width is %.\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', column.width + '%' );\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', column.width + '%' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// If no width is assigned to the column ..\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// If the table is NOT responsive throw an error. This is because column widths are in PX.\n\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: неверные настройки. Один или несколько столбцов не имеют назначенной ширины. Если для параметра responseiveTable установлено значение false, все столбцы должны иметь указанную ширину. Вместо этого отображается таблица как responsive.';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Calculate the width out of the remaining percentage.\n\t\t\t\t\t\t\tlet autoColumnWidth = ( 100 - this.tableWidth ) / noWidthColumns;\n\n\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', autoColumnWidth + '%' );\n\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', autoColumnWidth + '%' );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t// Initialize pagination settings.\n\t\t\t\tconst SETUP_PAGINATION = () =>\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.renderEngine === 2 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Sets the current page if none is set.\n\t\t\t\t\t\tconst INIT_CURRENT_PAGE = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( !this.rendering.pagination.currentPage )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Sets the current max number of rows per page if none is set.\n\t\t\t\t\t\tconst INIT_CURRENT_PAGE_ROWS = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( !this.rendering.pagination.currentPageRows )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentPageRows              = this.setting.paginationRowStart;\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentSelectedPageRowOption = this.setting.paginationRowStart;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Sets the options available for how many rows will appear on a page.\n\t\t\t\t\t\tconst SET_ROW_OPTIONS = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.pageRowOptions = this.setting.paginationRowLimits;\n\n\t\t\t\t\t\t\tif ( this.setting.paginationRowAll )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.pagination.pageRowOptions.push('All');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tINIT_CURRENT_PAGE();\n\t\t\t\t\t\tINIT_CURRENT_PAGE_ROWS();\n\t\t\t\t\t\tSET_ROW_OPTIONS();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Force pagination for external data provider.\n\t\t\t\tconst DATA_PROVIDER_CHECK = () =>\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.renderEngine === 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: внешний поставщик данных поддерживается только механизмом рендеринга Pagination. Пожалуйста, измените ваши настройки.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Configure the search option.\n\t\t\t\tconst SETUP_SEARCH = () =>\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.forceSearchOpen )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.feature.searching = true;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Build views.\n\t\t\t\tconst BUILD_VIEWS = () =>\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.views.length > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Validate view(s) format.\n\t\t\t\t\t\tthis.setting.views.forEach ( ( view, viewIndex ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// +1 is added to index because \"Default\" is the first (0).\n\t\t\t\t\t\t\tlet currentViewIndex = viewIndex + 1;\n\n\t\t\t\t\t\t\tif ( view.viewName.constructor.name === 'String' && view.schema.constructor.name === 'Array' && view.schema.length > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Create the view in the list.\n\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list, currentViewIndex,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tviewName : view.viewName,\n\t\t\t\t\t\t\t\t\tschema   : []\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Set the column width for each column.\n\t\t\t\t\t\t\t\tview.schema.forEach( ( column, columnIndex ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema, columnIndex,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname          : column.name ? column.name : '',\n\t\t\t\t\t\t\t\t\t\ttitle         : column.title ? column.title : '',\n\t\t\t\t\t\t\t\t\t\twidth         : column.width ? column.width : null,\n\t\t\t\t\t\t\t\t\t\toriginalWidth : column.width ? column.width : null,\n\t\t\t\t\t\t\t\t\t\torder         : column.order ? column.order : null,\n\t\t\t\t\t\t\t\t\t\ttype          : column.type ? column.type : 'String',\n\t\t\t\t\t\t\t\t\t\tfilterable    : column.filterable ? column.filterable : false,\n\t\t\t\t\t\t\t\t\t\tenabled       : column.enabled ? column.enabled : false,\n\t\t\t\t\t\t\t\t\t\theaderStyles  : {},\n\t\t\t\t\t\t\t\t\t\tdataStyles    : {},\n\t\t\t\t\t\t\t\t\t\tsort          : column.sort ? column.sort : false,\n\t\t\t\t\t\t\t\t\t\tsortDirection : column.sortDirection ? column.sortDirection : null,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// If the column has an assigned width ..\n\t\t\t\t\t\t\t\t\tif ( column.width !== null )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.rendering.views.list[currentViewIndex].schema[columnIndex].originalWidth = column.width;\n\n\t\t\t\t\t\t\t\t\t\t// If the table is NOT responsive, the width is PX.\n\t\t\t\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'width', column.width + 'px' );\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'min-width', column.width + 'px' );\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'height', this.setting.headerHeight + 'px' );\n\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'width', column.width + 'px' );\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'min-width', column.width + 'px' );\n\n\t\t\t\t\t\t\t\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'min-height', this.setting.rowHeight + 'px' );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// If the table IS responsive, the width is %.\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'width', column.width + '%' );\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'width', column.width + '%' );\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// If no width is assigned to the column ..\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// If the table is NOT responsive throw an error. This is because column widths are in PX.\n\t\t\t\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.status.tableError = `Error: Invalid settings in view name: ${ view.viewName }. One or more of the columns does not have an assigned width. When the setting responsiveTable is set to false, all columns must have a specified width. Rendering table as responsive instead.`;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Calculate the width out of the remaining percentage.\n\t\t\t\t\t\t\t\t\t\tlet autoColumnWidth = ( 100 - this.tableWidth ) / noWidthColumns;\n\n\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'width', autoColumnWidth + '%' );\n\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'width', autoColumnWidth + '%' );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Sort the new view.\n\t\t\t\t\t\t\t\tthis.rendering.views.list[currentViewIndex].schema.sort( ( a, b ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Ошибка: возникла проблема при проверке конфигурации представления. Проверьте настройки JD-таблицы.';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tINIT_ENGINE();\n\t\t\t\tINIT_COLUMNS();\n\t\t\t\tSETUP_MAXIMIZE();\n\t\t\t\tSETUP_SIZES();\n\t\t\t\tSETUP_PAGINATION();\n\t\t\t\tSETUP_SEARCH();\n\t\t\t\tDATA_PROVIDER_CHECK();\n\t\t\t\tBUILD_VIEWS();\n\t\t\t},\n\n\t\t\t// Configures the table context menu (right/left click).\n\t\t\tinitializeContextMenu : function ()\n\t\t\t{\n\t\t\t\t// LEFT CLICK\n\t\t\t\tif ( this.setting.contextMenuLeft || this.setting.contextMenuRight )\n\t\t\t\t{\n\t\t\t\t\twindow.addEventListener( \"click\", this.contextListenerLeftClick );\n\t\t\t\t}\n\n\t\t\t\t// RIGHT CLICK\n\t\t\t\tif ( this.setting.contextMenuRight )\n\t\t\t\t{\n\t\t\t\t\t// Register context menu (right click) event.\n\t\t\t\t\twindow.addEventListener( \"contextmenu\", this.contextListenerRightClick );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Emits the current state of the component.\n\t\t\temitState : function ()\n\t\t\t{\n\t\t\t\tthis.$emit( 'event-from-jd-table', this.componentState );\n\t\t\t},\n\n\t\t\t// JavaScript listener for resizing the window.\n\t\t\tresizeListener : function ( e )\n\t\t\t{\n\t\t\t\t// Clear the scrolling timer.\n\t\t\t\tclearTimeout( this.rendering.isResizing );\n\n\t\t\t\tthis.rendering.isResizing = setTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\t// If auto rendering is the engine, re-render.\n\t\t\t\t\tif ( this.rendering.engine === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.renderView( this.rendering.virtual.rowMiddleIndex );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.checkMobile();\n\t\t\t\t}, 750 );\n\t\t\t},\n\n\t\t\t// JavaScript listener for left clicking (context menu).\n\t\t\tcontextListenerLeftClick : function ( e )\n\t\t\t{\n\t\t\t\t// If the menu is visible already ..\n\t\t\t\tif ( this.status.contextMenu )\n\t\t\t\t{\n\t\t\t\t\tthis.hideContextMenu();\n\t\t\t\t}\n\n\t\t\t\tif ( this.setting.contextMenuLeft && e.target.closest( '.jd-body' ) )\n\t\t\t\t{\n\t\t\t\t\t// Get the location of the right click.\n\t\t\t\t\tconst clickLocation =\n\t\t\t\t\t{\n\t\t\t\t\t\tleft : e.clientX,\n\t\t\t\t\t\ttop  : e.clientY\n\t\t\t\t\t};\n\n\t\t\t\t\t// Show the menu at the click location.\n\t\t\t\t\tthis.showContextMenu( clickLocation );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// JavaScript listener for right clicking (context menu).\n\t\t\tcontextListenerRightClick : function ( e )\n\t\t\t{\n\t\t\t\t// If the click takes places in the table body ..\n\t\t\t\tif ( e.target.closest( '.jd-body' ) )\n\t\t\t\t{\n\t\t\t\t\t// Prevent the regular menu.\n\t\t\t\t\te.preventDefault();\n\n\t\t\t\t\t// Clear previous context (if any).\n\t\t\t\t\tif ( this.status.contextMenu )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideContextMenu();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Close any feature menu.\n\t\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t\t// Get the location of the right click.\n\t\t\t\t\tconst clickLocation =\n\t\t\t\t\t{\n\t\t\t\t\t\tleft : e.clientX,\n\t\t\t\t\t\ttop  : e.clientY\n\t\t\t\t\t};\n\n\t\t\t\t\t// Show the menu at the click location.\n\t\t\t\t\tthis.showContextMenu( clickLocation );\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// JavaScript listener for left clicking (quick menu).\n\t\t\tquickMenuListenerLeftClick : function ( e )\n\t\t\t{\n\t\t\t\t// Don't run this when clicking in the table body.\n\t\t\t\tif ( !e.target.closest( '.jd-body' ) )\n\t\t\t\t{\n\t\t\t\t\t// Ensure user clicks outside the popup window.\n\t\t\t\t\tif ( this.row.selectedIndex !== null && e.target.classList.contains('jd-layerPopup') )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.quickViewClose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Configures a click listener to close quick menu when clicked out of it.\n\t\t\tinitializeQuickMenu : function ()\n\t\t\t{\n\t\t\t\twindow.addEventListener( \"click\", this.quickMenuListenerLeftClick );\n\t\t\t},\n\n\t\t\t// Enables the context menu at the coordinates passed.\n\t\t\tshowContextMenu : function ( { top, left } )\n\t\t\t{\n\t\t\t\t// Close any feature menu.\n\t\t\t\tthis.featureAction( null );\n\n\t\t\t\tthis.$refs.jd_contextMenu.style.left = `${ left }px`;\n\t\t\t\tthis.$refs.jd_contextMenu.style.top  = `${ top }px`;\n\n\t\t\t\t// Update the index of the row right clicked on.\n\t\t\t\tthis.row.activeContextIndex   = this.row.activeHoverIndex;\n\t\t\t\tthis.row.activeContextElement = this.row.activeHoverElement;\n\n\t\t\t\t// Make the row red.\n\t\t\t\tthis.row.activeContextElement.classList.add('jd-rowSelect');\n\n\t\t\t\t// Show the context menu,\n\t\t\t\tthis.status.contextMenu = true;\n\n\t\t\t\t// Context menu position correction.\n\t\t\t\tsetTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\tlet contextWidth  = this.$refs.jd_contextMenu.offsetWidth;\n\t\t\t\t\tlet contextHeight = this.$refs.jd_contextMenu.offsetHeight;\n\t\t\t\t\tlet windowWidth   = window.innerWidth;\n\t\t\t\t\tlet windowHeight  = window.innerHeight;\n\n\t\t\t\t\tif ( ( windowWidth - left ) < contextWidth )\n\t\t\t\t\t{\n\t\t\t\t\t\t// 21 is subtracted to compensate for a scrollbar.\n\t\t\t\t\t\tthis.$refs.jd_contextMenu.style.left = ( windowWidth - contextWidth ) - 21 + \"px\";\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( (windowHeight - top ) < contextHeight )\n\t\t\t\t\t{\n\t\t\t\t\t\t// 21 is subtracted to compensate for a scrollbar.\n\t\t\t\t\t\tthis.$refs.jd_contextMenu.style.top = ( windowHeight - contextHeight ) - 21 + \"px\";\n\t\t\t\t\t}\n\n\t\t\t\t}, 50, { top, left } );\n\t\t\t},\n\n\t\t\t// Disabled (hides) the context menu.\n\t\t\thideContextMenu : function ()\n\t\t\t{\n\t\t\t\tif ( this.row.selectedIndex === null )\n\t\t\t\t{\n\t\t\t\t\t// Remove the row red.\n\t\t\t\t\tthis.row.activeContextElement.classList.remove('jd-rowSelect');\n\n\t\t\t\t\t// Update the index of the row right clicked on.\n\t\t\t\t\tthis.row.activeContextIndex   = null;\n\t\t\t\t\tthis.row.activeContextElement = null;\n\t\t\t\t}\n\n\t\t\t\tthis.status.contextMenu = false;\n\t\t\t},\n\n\t\t\t// Manages all feature actions.\n\t\t\tfeatureAction : function ( name )\n\t\t\t{\n\t\t\t\t// Switches the maximize flag.\n\t\t\t\tconst MAXIMIZE = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.feature.maximized = !this.feature.maximized;\n\n\t\t\t\t\t// Virtual Scroll: Re-render the rows based on the new window size.\n\t\t\t\t\tif ( this.rendering.engine === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.renderView( this.rendering.virtual.rowMiddleIndex );\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Shows/hides the search input field.\n\t\t\t\tconst SEARCH = () =>\n\t\t\t\t{\n\t\t\t\t\tif ( !this.setting.forceSearchOpen )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.feature.searching = !this.feature.searching;\n\n\t\t\t\t\t\tif ( this.feature.searching )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Waits for the search bar to be visible then focuses it.\n\t\t\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.$refs.searchField.focus();\n\t\t\t\t\t\t\t}, 150)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Emits a add new event to the parent.\n\t\t\t\tconst ADDNEW = () =>\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'AddItem';\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t};\n\n\t\t\t\t// Emits a add new event to the parent.\n\t\t\t\tconst VIEWITEM = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.contextView();\n\t\t\t\t};\n\n\t\t\t\t// Emits a add new event to the parent.\n\t\t\t\tconst EDITITEM = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.contextEdit();\n\t\t\t\t};\n\n\t\t\t\t// Emits a add new event to the parent.\n\t\t\t\tconst DELETEITEM = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.contextDelete();\n\t\t\t\t};\n\n\t\t\t\t// Emits a refresh event to the parent.\n\t\t\t\tconst REFRESH = () =>\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'Refresh';\n\n\t\t\t\t\t// Update table status.\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t};\n\n\t\t\t\t// Show/Hide the filtering view.\n\t\t\t\tconst FILTER = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.filters.show = !this.filters.show;\n\t\t\t\t};\n\n\t\t\t\t// Clean up any filter interface/variable settings when a feature button is pressed.\n\t\t\t\tconst FILTER_CLEAN_UP = () =>\n\t\t\t\t{\n\t\t\t\t\t// Reset any filter errors that may exist.\n\t\t\t\t\tthis.filters.error     = false;\n\t\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t\t// Clear filters if shown.\n\t\t\t\t\tif ( this.filters.show )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.show = false;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Show/Hide the column selection.\n\t\t\t\tconst COLUMNS = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.columns.selecting = !this.columns.selecting;\n\t\t\t\t};\n\n\t\t\t\t// Clean up any column selection interface/variable settings when feature button is pressed.\n\t\t\t\tconst COLUMNS_CLEAN_UP = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.columns.selecting = false;\n\t\t\t\t};\n\n\t\t\t\t// Show/hide the pagination row changing option.\n\t\t\t\tconst PAGINATION = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.pagination.changingRows = !this.rendering.pagination.changingRows;\n\t\t\t\t};\n\n\t\t\t\t// Clean up any pagination row changing options.\n\t\t\t\tconst PAGINATION_CLEAN_UP = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.pagination.changingRows = false;\n\t\t\t\t};\n\n\t\t\t\t// Clean up any view row changing options.\n\t\t\t\tconst VIEW_CLEAN_UP = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.views.changingViews = false;\n\t\t\t\t};\n\n\t\t\t\t// Show/hide the view changing option.\n\t\t\t\tconst VIEW = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.views.changingViews = !this.rendering.views.changingViews;\n\t\t\t\t};\n\n\t\t\t\t// Exports the current available data to excel.\n\t\t\t\tconst EXPORT = () =>\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'ExcelExport';\n\n\t\t\t\t\t// Check if a limit is set.\n\t\t\t\t\tif ( this.setting.exportLimit )\n\t\t\t\t\t{\n\t\t\t\t\t\tlet dataSize = null;\n\n\t\t\t\t\t\tconst checkExportLimit = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.setting.dataProvider !== 1 && this.processedData.length > this.setting.exportLimit )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdataSize = this.formatNumberWithCommas( this.processedData.length );\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst checkExportLimitExternal = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.setting.dataProvider === 1 && this.processedDataSize > this.setting.exportLimit )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdataSize = this.formatNumberWithCommas( this.processedDataSize );\n\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( checkExportLimit() || checkExportLimitExternal() )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\talert(`Sorry, you can only export a maximum of ${ this.formatNumberWithCommas( this.setting.exportLimit ) } records at a time. There are currently ${ dataSize } records in your table. Try filtering the records down further to use this feature.`)\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'processingData', true );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.exportExcel( this.processedData );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t};\n\n\t\t\t\tif ( name === 'MaxMinimize' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tMAXIMIZE();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'Search' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tSEARCH();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'AddNew' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tADDNEW();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'ViewItem' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tVIEWITEM();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'EditItem' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tEDITITEM();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'DeleteItem' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tDELETEITEM();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'Refresh' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tREFRESH();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'Columns' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tCOLUMNS();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'Filter' )\n\t\t\t\t{\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tFILTER();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'Pagination' )\n\t\t\t\t{\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tPAGINATION();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'Export' )\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\n\t\t\t\t\tEXPORT();\n\t\t\t\t}\n\t\t\t\telse if ( name === 'View' )\n\t\t\t\t{\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\n\t\t\t\t\tVIEW();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\tPAGINATION_CLEAN_UP();\n\t\t\t\t\tVIEW_CLEAN_UP();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Exports data to excel. Supports IE.\n\t\t\texportExcel : function ( data )\n\t\t\t{\n\t\t\t\t// Creates a HTML table to be exported.\n\t\t\t\tconst renderTable = () =>\n\t\t\t\t{\n\t\t\t\t\tlet table = '<table><thead>';\n\t\t\t\t\ttable += '<tr>';\n\t\t\t\t\tfor ( let i = 0; i < this.columns.list.length; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tconst column = this.columns.list[i];\n\t\t\t\t\t\ttable += '<th>';\n\t\t\t\t\t\tif ( typeof( column.title ) === 'undefined' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttable += column.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttable += column.title;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttable += '</th>';\n\t\t\t\t\t}\n\t\t\t\t\ttable += '</tr>';\n\t\t\t\t\ttable += '</thead><tbody>';\n\n\t\t\t\t\tfor ( let i = 0; i < data.length; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tconst row = data[i];\n\n\t\t\t\t\t\ttable += '<tr>';\n\n\t\t\t\t\t\tfor ( let j = 0; j < this.columns.list.length; j++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst column = this.columns.list[j];\n\n\t\t\t\t\t\t\ttable += '<td>';\n\t\t\t\t\t\t\ttable += row[column.name];\n\t\t\t\t\t\t\ttable += '</td>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttable += '</tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\ttable += '</tbody></table>';\n\n\t\t\t\t\treturn table;\n\t\t\t\t};\n\n\t\t\t\tlet userAgent      = window.navigator.userAgent;\n\t\t\t\tlet browserDetails = userAgent.indexOf(\"MSIE \");\n\n\t\t\t\tif ( browserDetails > 0 || !!navigator.userAgent.match( /Trident.*rv\\:11\\./ ) )\n\t\t\t\t{\n\t\t\t\t\texcelExportArea.document.open( \"txt/html\",\"replace\" );\n\t\t\t\t\texcelExportArea.document.write( renderTable() );\n\t\t\t\t\texcelExportArea.document.close();\n\t\t\t\t\texcelExportArea.focus();\n\n\t\t\t\t\texcelExportArea.document.execCommand( \"SaveAs\",true,\"Data_Export.xls\" );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//window.open( 'data:application/vnd.ms-excel,' + encodeURIComponent( renderTable() ) );\n\t\t\t\t\tvar blob = this.base64ToBlob(this.jsonToXLS(data), 'application/vnd.ms-excel');\n\t\t\t\t\tdownload(blob, this.setting.title + '.xls', 'application/vnd.ms-excel');\n\t\t\t\t}\n\t\t\t},\n\t\t\t/*\n\t\t\tconvert values with newline \\n characters into <br/>\n\t\t\t*/\n\t\t\tvalueReformattedForMultilines(value) {\n\t\t\t  if (typeof(value)==\"string\") return(value.replace(/\\n/ig,\"<br/>\"));\n\t\t\t  else return(value);\n\t\t\t},\n\t\t\tjsonToXLS(data) {\n\t\t\t\t  let xlsTemp =\n\t\t\t\t\t'<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\n\t\t\t\t  \tlet table = '<thead>';\n\t\t\t\t\ttable += '<tr>';\n\t\t\t\t\tfor ( let i = 0; i < this.columns.list.length; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tconst column = this.columns.list[i];\n\t\t\t\t\t\ttable += '<th>';\n\t\t\t\t\t\tif ( typeof( column.title ) === 'undefined' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttable += column.name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttable += column.title;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttable += '</th>';\n\t\t\t\t\t}\n\t\t\t\t\ttable += '</tr>';\n\t\t\t\t\ttable += '</thead><tbody>';\n\t\t\t\t\tfor ( let i = 0; i < data.length; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tconst row = data[i];\n\n\t\t\t\t\t\ttable += '<tr>';\n\n\t\t\t\t\t\tfor ( let j = 0; j < this.columns.list.length; j++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst column = this.columns.list[j];\n\n\t\t\t\t\t\t\ttable += '<td>';\n\t\t\t\t\t\t\ttable += this.valueReformattedForMultilines(row[column.name]);\n\t\t\t\t\t\t\ttable += '</td>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttable += '</tr>';\n\t\t\t\t\t}\n\n\t\t\t\t\ttable += '</tbody></table>'\n\t\t\t\t\n\t\t\t\t  let xlsData = table;\n\t\t\t\t  return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\n\t\t\t},\n\n\t\t\t// Processes the raw data through filters/search. This returns a promise.\n\t\t\tprocessData : function ()\n\t\t\t{\n\t\t\t\treturn new Promise( ( resolve, reject ) =>\n\t\t\t\t{\n\t\t\t\t\t// External Data - Just copy to processedData.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.processedData = this.data;\n\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t\t// Internal Data - Process through search/filter.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Timeout ensures processing message.\n\t\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet processedData = this.data;\n\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t// SEARCHING\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// Search terms filter all of the data that JD-Table has. This means search happens before filtering.\n\n\t\t\t\t\t\t\t// Clean the search term.\n\t\t\t\t\t\t\tlet searchTerm = this.search.text.trim().toLowerCase();\n\n\t\t\t\t\t\t\t// If a search term exists, search it.\n\t\t\t\t\t\t\tif ( searchTerm )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Indicate that searching is being done.\n\t\t\t\t\t\t\t\tthis.search.searching = true;\n\n\t\t\t\t\t\t\t\tprocessedData = processedData.filter ( ( row ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Define the search pattern for various column type date: String/Number/Array.\n\t\t\t\t\t\t\t\t\tconst searchAlgorithm = ( column ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Search a column which is made up of an array or strings.\n\t\t\t\t\t\t\t\t\t\tif ( column.type === 'Array' )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlet searchMatch = false;\n\n\t\t\t\t\t\t\t\t\t\t\tif ( row[column.name] && row[column.name].length > 0 )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t// For each item in the row/column.\n\t\t\t\t\t\t\t\t\t\t\t\trow[column.name].forEach( ( item ) =>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet searchText = String( item ).toLowerCase();\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Casts number variables to strings to make the searchable with Strings.\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( !searchMatch && searchText.includes( searchTerm ) )\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsearchMatch = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\treturn searchMatch;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// Search a column which is made up of strings or numbers.\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlet searchText = String( row[column.name] ).toLowerCase();\n\n\t\t\t\t\t\t\t\t\t\t\t// Casts number variables to strings to make the searchable with Strings.\n\t\t\t\t\t\t\t\t\t\t\tif ( searchText.includes( searchTerm ) )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// If the search algorithm function returns true, that row is kept (not excluded from results).\n\t\t\t\t\t\t\t\t\treturn this.columns.list.find( searchAlgorithm );\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Indicate that searching is NOT being done.\n\t\t\t\t\t\t\t\tthis.search.searching = false;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t// FILTERING\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// Filters are applied using the following rules:\n\t\t\t\t\t\t\t// - Filters with the same column are grouped together and use the OR condition (excluding < and > which are AND)\n\t\t\t\t\t\t\t// \t - Filter #1: 'Column1' --> 'Equals To' --> 'John'\n\t\t\t\t\t\t\t//   - Filter #2: 'Column1' --> 'Equals To' --> 'Peter'\n\t\t\t\t\t\t\t//   - Applied: Show rows where 'Column1' --> 'Equals To' --> 'John' OR 'Peter'\n\t\t\t\t\t\t\t// - Filters applied to different columns use AND condition.\n\t\t\t\t\t\t\t//   - Filter #1: 'Column1' --> 'Equals To' --> 'John'\n\t\t\t\t\t\t\t//   - Filter #2: 'Column2' --> 'Equals To' --> '$100.00'\n\t\t\t\t\t\t\t//   - Applied: Show rows where 'Column1' --> 'Equals To' --> 'John' AND 'Column2' 'Equals To' --> '$100.00'\n\t\t\t\t\t\t\tif ( this.filtering )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet tempData = [];\n\n\t\t\t\t\t\t\t\t// Returns a unique array of column names that are actively filtered.\n\t\t\t\t\t\t\t\tconst UNIQUE_FILTER_COLUMNS = () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlet columnSet     = new Set( this.filters.active.map( ( filter ) => filter.column.name ) );\n\t\t\t\t\t\t\t\t\tlet uniqueColumns = [];\n\n\t\t\t\t\t\t\t\t\tcolumnSet.forEach( ( column ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tuniqueColumns.push( column );\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\treturn uniqueColumns;\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Equals To (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_EQUALS_TO = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase() === String(columnFilter.value).toLowerCase() );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Not Equals To (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_NOT_EQUALS_TO = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase() !== String(columnFilter.value).toLowerCase() );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Begins With (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_BEGINS_WITH = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase().startsWith(String(columnFilter.value).toLowerCase()) );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Contains (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_CONTAINS = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase().includes( String( columnFilter.value ).toLowerCase() ) );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Greater and Less/Equal To (Number Based).\n\t\t\t\t\t\t\t\tconst FILTER_GREATER_LESS_THAN = ( row, columnName, greaterThanValue, lessThanValue ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlet columnNumber = Number( row[columnName] );\n\n\t\t\t\t\t\t\t\t\tif ( greaterThanValue && lessThanValue )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber >= greaterThanValue && columnNumber <= lessThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( greaterThanValue && !lessThanValue )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber >= greaterThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( !greaterThanValue && lessThanValue )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber <= lessThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Cycle through the unique column filters.\n\t\t\t\t\t\t\t\tUNIQUE_FILTER_COLUMNS().forEach( ( columnName, index ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Will hold the data that will be filtered.\n\t\t\t\t\t\t\t\t\tlet dataToBeFiltered = [];\n\n\t\t\t\t\t\t\t\t\t// Will hold the new set of filtered data.\n\t\t\t\t\t\t\t\t\tlet newFilteredData = [];\n\n\t\t\t\t\t\t\t\t\t// On first pass (for the first column), use all the data available.\n\t\t\t\t\t\t\t\t\tif ( index === 0 )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdataToBeFiltered = processedData;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// On second pass (next column) use existing filtered data.\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdataToBeFiltered = tempData;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Get all of the filters for the given column.\n\t\t\t\t\t\t\t\t\tlet columnFilters = this.filters.active.filter( ( filter ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn filter.column.name === columnName;\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Stores numeric comparison values.\n\t\t\t\t\t\t\t\t\tlet greaterThanValue = null;\n\t\t\t\t\t\t\t\t\tlet lessThanValue    = null;\n\n\t\t\t\t\t\t\t\t\t// Check for Greater/Equal To / Less/Equal To filters which should be grouped.\n\t\t\t\t\t\t\t\t\tcolumnFilters.forEach( ( columnFilter ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Store greater then for\n\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Больше / Равно' )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tgreaterThanValue = columnFilter.value;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Меньше / Равно' )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlessThanValue = columnFilter.value;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// For each row of data, check the column filter. If any single filter passes, add the row and move to the next.\n\t\t\t\t\t\t\t\t\tdataToBeFiltered.forEach( ( row, index ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Indicates if the row has been added to the newly filtered array.\n\t\t\t\t\t\t\t\t\t\tlet hasBeenPushed = false;\n\n\t\t\t\t\t\t\t\t\t\t// Process string based filters.\n\t\t\t\t\t\t\t\t\t\tcolumnFilters.forEach( ( columnFilter ) =>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Equals To\n\t\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Равно' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_EQUALS_TO( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Contains\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Содержит' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_CONTAINS( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Not Equals To\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Не равно' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_NOT_EQUALS_TO( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Begins With\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Начинается с' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_BEGINS_WITH( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t// Check if there are numeric specific operations.\n\t\t\t\t\t\t\t\t\t\tif ( greaterThanValue || lessThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_GREATER_LESS_THAN( row, columnName, greaterThanValue, lessThanValue ) )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Replace the tempData with the newly filtered data.\n\t\t\t\t\t\t\t\t\ttempData = newFilteredData;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tprocessedData = tempData;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.processedData = processedData;\n\n\t\t\t\t\t\t\t// Stop processing visual.\n\t\t\t\t\t\t\tthis.updateStatus( 'processingData', false );\n\n\t\t\t\t\t\t\t// End the promise.\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}, 75);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// Processes the passed event.\n\t\t\tprocessEvent : function ( name )\n\t\t\t{\n\t\t\t\t// Process the data sent to JD-Table.\n\t\t\t\tif ( !this.status.tableError && name === 'sendData' )\n\t\t\t\t{\n\t\t\t\t\tlet eventError = false;\n\n\t\t\t\t\t// Clear the current view.\n\t\t\t\t\tthis.currentTableData = [];\n\n\t\t\t\t\t// Internal Data\n\t\t\t\t\tif ( this.setting.dataProvider === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.eventFromApp.payload !== null && this.eventFromApp.payload.constructor.name === 'Array' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.eventFromApp.payload.length > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Assign the data to the component.\n\t\t\t\t\t\t\t\tthis.data = this.eventFromApp.payload;\n\n\t\t\t\t\t\t\t\t// Reset scroll position.\n\t\t\t\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Render the data.\n\t\t\t\t\t\t\t\t\tthis.renderView();\n\n\t\t\t\t\t\t\t\t\tif ( typeof this.eventFromApp.componentState !== 'undefined' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.changeState( this.eventFromApp.componentState );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tthis.tableReady = true;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.currentTableData = [];\n\n\t\t\t\t\t\t\t\tthis.tableReady = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\teventError = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// External Data\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.eventFromApp.payload !== null && this.eventFromApp.payload.constructor.name === 'Object' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.eventFromApp.payload.data.length > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Assign the results true length.\n\t\t\t\t\t\t\t\tthis.rendering.external.dataSize = this.eventFromApp.payload.count;\n\n\t\t\t\t\t\t\t\t// Assign the data to the component.\n\t\t\t\t\t\t\t\tthis.data = this.eventFromApp.payload.data;\n\n\t\t\t\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Render the data.\n\t\t\t\t\t\t\t\t\tthis.renderView();\n\n\t\t\t\t\t\t\t\t\tif ( typeof this.eventFromApp.componentState !== 'undefined' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.changeState( this.eventFromApp.componentState );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tthis.tableReady = true;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.currentTableData = [];\n\n\t\t\t\t\t\t\t\tthis.tableReady = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\teventError = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Clear any messaging/statuses.\n\t\t\t\t\tthis.updateStatus( null, null );\n\n\t\t\t\t\tif ( eventError )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.status.tableError = 'Ошибка: проблема события sendData. Полезная нагрузка нулевая или неправильно отформатирована.';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Reset table (Clear All)\n\t\t\t\tif ( !this.status.tableError && name === 'clearAll' )\n\t\t\t\t{\n\t\t\t\t\tthis.clearTable();\n\t\t\t\t}\n\n\t\t\t\t// Displays a table error.\n\t\t\t\tif ( !this.status.tableError && name === 'tableError' )\n\t\t\t\t{\n\t\t\t\t\tthis.status.tableError = this.eventFromApp.payload;\n\n\t\t\t\t\t// Clear any messaging/statuses.\n\t\t\t\t\tthis.updateStatus( null, null );\n\t\t\t\t}\n\n\t\t\t\t// Exports passed data to excel.\n\t\t\t\tif ( !this.status.tableError && name === 'exportExcel' )\n\t\t\t\t{\n\t\t\t\t\tthis.exportExcel( this.eventFromApp.payload );\n\n\t\t\t\t\t// Clear any messaging/statuses.\n\t\t\t\t\tthis.updateStatus( null, null );\n\t\t\t\t}\n\n\t\t\t\t// Sets the component state.\n\t\t\t\tif ( !this.status.tableError && name === 'setState' )\n\t\t\t\t{\n\t\t\t\t\tif ( this.eventFromApp.componentState !== null && this.eventFromApp.componentState.constructor.name === 'Object' )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.changeState( this.eventFromApp.componentState );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Updates the state of JD-Table\n\t\t\tchangeState : function ( newState )\n\t\t\t{\n\t\t\t\t// Search Text\n\t\t\t\tif ( typeof newState.searchText !== 'undefined' && newState.searchText )\n\t\t\t\t{\n\t\t\t\t\tthis.search.text = String ( newState.searchText );\n\t\t\t\t}\n\n\t\t\t\t// Searching\n\t\t\t\tif ( typeof newState.searchApplied !== 'undefined' && newState.searchApplied !== null && newState.searchApplied.constructor.name === 'Boolean' )\n\t\t\t\t{\n\t\t\t\t\tthis.performSearch();\n\t\t\t\t}\n\n\t\t\t\t// Active Filters\n\t\t\t\tif ( typeof newState.filterApplied !== 'undefined' && newState.filterApplied !== null && newState.filterApplied.constructor.name === 'Array' )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.active = newState.filterApplied;\n\n\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Page Limit\n\t\t\t\tif ( typeof newState.pageLimit !== 'undefined' && newState.pageLimit !== null && newState.pageLimit.constructor.name === 'Number' )\n\t\t\t\t{\n\t\t\t\t\tthis.changePageRows( newState.pageLimit )\n\t\t\t\t}\n\n\t\t\t\t// Current Page\n\t\t\t\tif ( typeof newState.currentPage !== 'undefined' && newState.currentPage !== null && newState.currentPage.constructor.name === 'Number' )\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.pagination.currentPage = newState.currentPage;\n\n\t\t\t\t\t// Re-render the view.\n\t\t\t\t\tthis.renderView();\n\t\t\t\t}\n\n\t\t\t\t// Column Sort\n\t\t\t\tif ( typeof newState.sortColumnIndex !== 'undefined' && newState.sortColumnIndex !== null && newState.sortColumnIndex.constructor.name === 'Number' )\n\t\t\t\t{\n\t\t\t\t\tthis.columns.activeSortIndex = newState.sortColumnIndex;\n\n\t\t\t\t\t// Sorted Direction\n\t\t\t\t\tif ( typeof newState.sortDirection !== 'undefined' && newState.sortDirection !== null && newState.sortDirection.constructor.name === 'String' )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( newState.sortDirection === 'ASC' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Current Selected View\n\t\t\t\tif ( typeof newState.currentView !== 'undefined' && newState.currentView !== null )\n\t\t\t\t{\n\t\t\t\t\tthis.changeView( newState.currentView );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Renders the correct view based on the data and rendering engine setting.\n\t\t\trenderView : function ( renderPosition = 0 )\n\t\t\t{\n\t\t\t\t// Start processing visual.\n\t\t\t\tthis.updateStatus( 'processingData', true );\n\n\t\t\t\t// Timeout ensures processing message.\n\t\t\t\tsetTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\t// Check mobile size.\n\t\t\t\t\tthis.checkMobile();\n\n\t\t\t\t\t// Sort the data.\n\t\t\t\t\tthis.sortData();\n\n\t\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Rendering Engine: Auto\n\t\t\t\t\t\tif ( this.setting.renderEngine === 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Render full.\n\t\t\t\t\t\t\tif ( this.processedDataSize <= this.setting.virtualEngineRowStart )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.engine = 1;\n\n\t\t\t\t\t\t\t\tthis.renderViewAll();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Render virtual.\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.engine = 0;\n\n\t\t\t\t\t\t\t\tthis.renderViewVirtual( renderPosition );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Render All.\n\t\t\t\t\t\t\tif ( this.setting.renderEngine === 1 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.engine = 1;\n\n\t\t\t\t\t\t\t\tthis.renderViewAll();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Render Pagination\n\t\t\t\t\t\t\tif ( this.setting.renderEngine === 2 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.engine = 2;\n\n\t\t\t\t\t\t\t\tthis.renderPagination();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.currentTableData = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.checkBodyScroll();\n\n\t\t\t\t\t// Stop processing visual.\n\t\t\t\t\tthis.updateStatus( 'processingData', false );\n\t\t\t\t}, 80 );\n\t\t\t},\n\n\t\t\t// Render all the data passed to JD-Table.\n\t\t\trenderViewAll : function ()\n\t\t\t{\n\t\t\t\tlet fullView = [];\n\n\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t{\n\t\t\t\t\tthis.processedData.forEach ( ( row, index ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tfullView.push\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tindex : index,\n\t\t\t\t\t\t\tdata  : row\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.currentTableData = fullView;\n\t\t\t},\n\n\t\t\t// Renders the virtual view based on the passed position.\n\t\t\trenderViewVirtual : function ( renderPosition )\n\t\t\t{\n\t\t\t\t// Calculate the virtual render buffer size. This # of items will be loaded before and after the view.\n\t\t\t\tconst VIRTUAL_BUFFER_SIZE = () =>\n\t\t\t\t{\n\t\t\t\t\t// Set the buffer size to 5 times the amount of rows that fit in the view.\n\t\t\t\t\treturn this.getRowsInView() * this.rendering.virtual.virtualBufferSize;\n\t\t\t\t};\n\n\t\t\t\t// Determines if the renderPosition is near the start of the list.\n\t\t\t\tconst VIRTUAL_START_ZONE = ( position ) =>\n\t\t\t\t{\n\t\t\t\t\treturn ( position <= VIRTUAL_BUFFER_SIZE() );\n\t\t\t\t};\n\n\t\t\t\t// Determines if the renderPosition is near the end of the list.\n\t\t\t\tconst VIRTUAL_END_ZONE = ( position ) =>\n\t\t\t\t{\n\t\t\t\t\treturn ( position >= ( this.processedDataSize - 1 ) || position >= (this.processedDataSize - VIRTUAL_BUFFER_SIZE() ) );\n\t\t\t\t};\n\n\t\t\t\tlet updatedView = [];\n\n\t\t\t\t// Set the virtual height div.\n\t\t\t\tthis.rendering.virtual.height = 0;\n\n\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t{\n\t\t\t\t\t// Update the virtual height div.\n\t\t\t\t\tthis.rendering.virtual.height = this.processedDataSize * this.setting.rowHeight;\n\n\t\t\t\t\tlet startPosition = renderPosition - VIRTUAL_BUFFER_SIZE();\n\t\t\t\t\tlet endPosition   = renderPosition + VIRTUAL_BUFFER_SIZE() + this.getRowsInView();\n\n\t\t\t\t\t// If the render position is in the start zone, set to 0 (beginning) of data.\n\t\t\t\t\tif ( VIRTUAL_START_ZONE( startPosition ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tstartPosition = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the render position is in the end zone, set to the last data item (end).\n\t\t\t\t\tif ( VIRTUAL_END_ZONE( endPosition ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tendPosition = this.processedDataSize - 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update the currently rendered top row (index).\n\t\t\t\t\tthis.rendering.virtual.rowTopIndex = startPosition;\n\n\t\t\t\t\t// Update the currently rendered bottom row (index).\n\t\t\t\t\tthis.rendering.virtual.rowBottomIndex = endPosition;\n\n\t\t\t\t\t// Update the currently rendered position.\n\t\t\t\t\tthis.rendering.virtual.rowMiddleIndex = renderPosition;\n\n\t\t\t\t\tfor ( let i = startPosition; i <= endPosition; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Add item to end of view.\n\t\t\t\t\t\tupdatedView.push\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tindex : i,\n\t\t\t\t\t\t\tdata  : this.processedData[i]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set the next render positions (top/bottom).\n\t\t\t\t\tthis.setRenderPositions();\n\t\t\t\t}\n\n\t\t\t\tthis.currentTableData = updatedView;\n\t\t\t},\n\n\t\t\t// Renders a set amount of records per page.\n\t\t\trenderPagination : function ()\n\t\t\t{\n\t\t\t\t// Sets the available pages based on the data size and rows per page.\n\t\t\t\tconst SET_AVAILABLE_PAGES = () =>\n\t\t\t\t{\n\t\t\t\t\tthis.rendering.pagination.availablePages = Math.ceil( this.processedDataSize / this.rendering.pagination.currentPageRows );\n\n\t\t\t\t\tif ( this.rendering.pagination.currentPage > this.rendering.pagination.availablePages )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Returns the rows that should be in the current view based ont he page.\n\t\t\t\tconst GET_ROWS_IN_PAGE = () =>\n\t\t\t\t{\n\t\t\t\t\tlet pageView   = [];\n\t\t\t\t\tlet startIndex = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows ) - this.rendering.pagination.currentPageRows;\n\t\t\t\t\tlet endIndex   = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows );\n\n\t\t\t\t\t// Correction for external data.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 && this.processedDataSize )\n\t\t\t\t\t{\n\t\t\t\t\t\tstartIndex = 0;\n\t\t\t\t\t\tendIndex   = this.processedData.length;\n\t\t\t\t\t}\n\n\t\t\t\t\t// End index correction.\n\t\t\t\t\tif ( endIndex > this.processedDataSize )\n\t\t\t\t\t{\n\t\t\t\t\t\tendIndex = this.processedDataSize;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = startIndex; i < endIndex; i++ )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Add item to end of view.\n\t\t\t\t\t\tpageView.push\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tindex : i,\n\t\t\t\t\t\t\tdata  : this.processedData[i]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( pageView.length > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows ) - this.rendering.pagination.currentPageRows;\n\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows );\n\n\t\t\t\t\t\t\t// End index correction for last page\n\t\t\t\t\t\t\tif ( this.rendering.pagination.currentEndIndex > this.processedDataSize )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex = this.processedDataSize;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = startIndex;\n\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = endIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = 0;\n\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn pageView;\n\t\t\t\t};\n\n\t\t\t\t// Sets the left and right page options for the footer.\n\t\t\t\tconst SET_PAGE_OPTIONS = () =>\n\t\t\t\t{\n\t\t\t\t\tlet leftPages       = [];\n\t\t\t\t\tlet rightPages      = [];\n\t\t\t\t\tlet sideQuantity    = this.setting.pageSideQuantity;\n\n\t\t\t\t\t// Correct the side quantity if there aren't enough pages to fulfill it.\n\t\t\t\t\tif ( ( sideQuantity * 2 ) > this.rendering.pagination.availablePages )\n\t\t\t\t\t{\n\t\t\t\t\t\tsideQuantity = Math.ceil( this.rendering.pagination.availablePages / 2 );\n\t\t\t\t\t}\n\n\t\t\t\t\t// If at the beginning of the page last.\n\t\t\t\t\tif ( this.rendering.pagination.currentPage <= sideQuantity )\n\t\t\t\t\t{\n\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftPages.push( i );\n\t\t\t\t\t\t\trightPages.push( i + sideQuantity );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the available pages is a odd number, remove the last rightPage option (extra).\n\t\t\t\t\t\tif ( this.rendering.pagination.availablePages % 2 !== 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trightPages.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// If at the end of the page last.\n\t\t\t\t\t\tif ( this.rendering.pagination.currentPage >= ( this.rendering.pagination.availablePages - sideQuantity ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet tempTotalPages = this.rendering.pagination.availablePages;\n\n\t\t\t\t\t\t\t// Correction for condition when there are not enough pages to balance on left and right.\n\t\t\t\t\t\t\t// This will ensure the left side gets filled first.\n\t\t\t\t\t\t\tlet rightSideQuantity = tempTotalPages - sideQuantity;\n\n\t\t\t\t\t\t\tif ( rightSideQuantity > sideQuantity )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trightSideQuantity = sideQuantity;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor ( let i = 1; i <= rightSideQuantity; i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trightPages.push( tempTotalPages );\n\n\t\t\t\t\t\t\t\ttempTotalPages--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfor ( let i = 1; ( i <= sideQuantity && tempTotalPages !== 0 ); i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tleftPages.push( tempTotalPages );\n\n\t\t\t\t\t\t\t\ttempTotalPages--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Reverse the sort order.\n\t\t\t\t\t\t\tleftPages.reverse();\n\t\t\t\t\t\t\trightPages.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet tempCurrentPage = this.rendering.pagination.currentPage;\n\n\t\t\t\t\t\t\t// Set left side.\n\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tleftPages.push( tempCurrentPage );\n\n\t\t\t\t\t\t\t\ttempCurrentPage--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttempCurrentPage = this.rendering.pagination.currentPage + 1;\n\n\t\t\t\t\t\t\t// Set right side.\n\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trightPages.push( tempCurrentPage );\n\n\t\t\t\t\t\t\t\ttempCurrentPage++;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Reverse the sort order.\n\t\t\t\t\t\t\tleftPages.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.rendering.pagination.leftPages             = leftPages;\n\t\t\t\t\tthis.rendering.pagination.rightPages            = rightPages;\n\t\t\t\t\tthis.rendering.pagination.currentPageHightlight = this.rendering.pagination.currentPage;\n\t\t\t\t};\n\n\t\t\t\tSET_AVAILABLE_PAGES();\n\t\t\t\tSET_PAGE_OPTIONS();\n\n\t\t\t\t// Reset the scroll position.\n\t\t\t\tthis.resetScroll();\n\n\t\t\t\t// Update the table view.\n\t\t\t\tthis.currentTableData = GET_ROWS_IN_PAGE();\n\t\t\t},\n\n\t\t\t// Changes the page to the passed value.\n\t\t\tpaginationChange : function ( page )\n\t\t\t{\n\t\t\t\tif ( this.rendering.pagination.currentPage !== page )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'PaginationGoToSpecificPage';\n\n\t\t\t\t\t// Increase the page.\n\t\t\t\t\tthis.rendering.pagination.currentPage = page;\n\n\t\t\t\t\t// Emit pagination event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// Update the view.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Checks and processes the next page of paginated data.\n\t\t\tpaginationNext : function ()\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'PaginationGoToNextPage';\n\n\t\t\t\tlet nextPage = this.rendering.pagination.currentPage + 1;\n\n\t\t\t\t// Ensure not going beyond available pages.\n\t\t\t\tif ( nextPage <= this.rendering.pagination.availablePages )\n\t\t\t\t{\n\t\t\t\t\t// Increase the page.\n\t\t\t\t\tthis.rendering.pagination.currentPage++;\n\n\t\t\t\t\t// Emit pagination event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// Update the view.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Changes to the last page (end of dataset).\n\t\t\tpaginationLast : function ()\n\t\t\t{\n\t\t\t\tif ( this.rendering.pagination.currentPage !== this.rendering.pagination.availablePages )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'PaginationGoToLastPage';\n\n\t\t\t\t\t// Set the current page to the last.\n\t\t\t\t\tthis.rendering.pagination.currentPage = this.rendering.pagination.availablePages;\n\n\t\t\t\t\t// Emit pagination event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// Update the view.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Checks and processes the previous page of paginated data.\n\t\t\tpaginationPrevious : function ()\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'PaginationGoToPreviousPage';\n\n\t\t\t\tlet previousPage = this.rendering.pagination.currentPage - 1;\n\n\t\t\t\t// Ensure not going beyond available pages.\n\t\t\t\tif ( previousPage >= 1 )\n\t\t\t\t{\n\t\t\t\t\t// Increase the page.\n\t\t\t\t\tthis.rendering.pagination.currentPage--;\n\n\t\t\t\t\t// Emit pagination event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// Update the view.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Changes to the first page (beginning of dataset).\n\t\t\tpaginationFirst : function ()\n\t\t\t{\n\t\t\t\tif ( this.rendering.pagination.currentPage !== 1 )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'PaginationGoToFirstPage';\n\n\t\t\t\t\t// Set the current page to the last.\n\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\n\n\t\t\t\t\t// Emit pagination event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// Update the view.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Changes how many rows can appear per page.\n\t\t\tchangePageRows : function ( rows )\n\t\t\t{\n\t\t\t\tif ( this.rendering.pagination.currentSelectedPageRowOption !== rows )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'PaginationPageLimitChange';\n\n\t\t\t\t\tif ( rows === 'All' )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.currentPageRows = this.processedDataSize;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.currentPageRows = rows;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.rendering.pagination.currentSelectedPageRowOption = rows;\n\n\t\t\t\t\tthis.rendering.pagination.currentPage           = 1;\n\t\t\t\t\tthis.rendering.pagination.currentPageHightlight = null;\n\t\t\t\t\tthis.rendering.pagination.currentStartIndex     = null;\n\t\t\t\t\tthis.rendering.pagination.currentEndIndex       = null;\n\t\t\t\t\tthis.rendering.pagination.availablePages        = null;\n\t\t\t\t\tthis.rendering.pagination.changingRows          = false;\n\t\t\t\t\tthis.rendering.pagination.leftPages             = [];\n\t\t\t\t\tthis.rendering.pagination.rightPages            = [];\n\t\t\t\t\tthis.rendering.external.dataSize                = null;\n\n\t\t\t\t\t// Emit pagination event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// Update the view.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Changes the current view (Shows/hides a grouping of columns).\n\t\t\tchangeViews : function ( view )\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'ChangeView';\n\n\t\t\t\tif ( view )\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.views.currentSelectedView !== view.viewName )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Update the status.\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\n\t\t\t\t\t\t// Update the current view.\n\t\t\t\t\t\tthis.rendering.views.currentSelectedView = view.viewName;\n\t\t\t\t\t\tthis.rendering.views.currentView         = view;\n\n\t\t\t\t\t\t// Update the visibility on all columns based on the view.\n\t\t\t\t\t\tthis.columns.list.forEach ( ( column ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet matchedColumn = this.rendering.views.currentView.schema.find( ( viewColumn ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn column.name === viewColumn.name;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif ( matchedColumn )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolumn.enabled = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolumn.enabled = false\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tlet hasBeenSorted = false;\n\n\t\t\t\t\t\t// Update the sort.\n\t\t\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( viewColumn, viewIndex ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( viewColumn.sort )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.columns.activeSortIndex    = viewIndex;\n\t\t\t\t\t\t\t\tthis.columns.activeSortName     = viewColumn.name;\n\t\t\t\t\t\t\t\tthis.columns.activeSortSpecial  = viewColumn.sortSpecial;\n\t\t\t\t\t\t\t\thasBeenSorted                   = true;\n\n\t\t\t\t\t\t\t\tif ( typeof( viewColumn.sortDirection ) === 'string' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\n\n\t\t\t\t\t\t\t\t\tif ( viewColumn.sortDirection === 'asc' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif ( !hasBeenSorted )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.columns.activeSortIndex   = 0;\n\t\t\t\t\t\t\tthis.columns.activeSortAsc     = true\n\t\t\t\t\t\t\tthis.columns.activeSortName    = this.rendering.views.currentView.schema[0].name;\n\t\t\t\t\t\t\tthis.columns.activeSortSpecial = this.rendering.views.currentView.schema[0].sortSpecial;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.rendering.views.changingViews = false;\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Virtual Engine: Sets the next top and bottom re-rendering position points in pixels.\n\t\t\tsetRenderPositions : function ()\n\t\t\t{\n\t\t\t\t// For a re-render.\n\t\t\t\tthis.$forceUpdate();\n\n\t\t\t\t// We use nextTick() so that the height calculations are performed after the render is complete.\n\t\t\t\tthis.$nextTick( () =>\n\t\t\t\t{\n\t\t\t\t\t// Returns the height of the current rendered view (all items).\n\t\t\t\t\tconst CURRENT_VIEW_HEIGHT = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.$refs.viewData.clientHeight;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Returns the current position (top) of the view inside the body.\n\t\t\t\t\tconst CURRENT_VIEW_POSITION_PX = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.$refs.viewData.offsetTop;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Returns the current height of the table body.\n\t\t\t\t\tconst CURRENT_BODY_HEIGHT = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.$refs.bodyData.clientHeight;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Calculate the next render (top) position.\n\t\t\t\t\tif ( this.rendering.virtual.rowTopIndex === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.virtual.triggerTopPositionPX = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render when the scroll bar is at a position where only 5 rows exist above.\n\t\t\t\t\t\tthis.rendering.virtual.triggerTopPositionPX = Math.floor( CURRENT_VIEW_POSITION_PX() + ( CURRENT_VIEW_HEIGHT() / 8 ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Calculate the next render (bottom) position.\n\t\t\t\t\tif ( this.rendering.virtual.rowBottomIndex === ( this.processedDataSize - 1 ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX = -1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Re-render when scroll bar is at a position where only 2 pages of rows exist.\n\t\t\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX = Math.floor ( ( CURRENT_VIEW_POSITION_PX() + CURRENT_VIEW_HEIGHT() ) - ( CURRENT_BODY_HEIGHT() * 2.0 ) );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// Used for virtual rendering, renders the view when scrolling at top/bottom trigger points.\n\t\t\tvirtualScroll : function ()\n\t\t\t{\n\t\t\t\tif ( this.rendering.engine !== 0 )\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( !this.rendering.resettingScroll )\n\t\t\t\t{\n\t\t\t\t\t// Clear the scrolling timer.\n\t\t\t\t\tclearTimeout( this.rendering.isScrolling );\n\n\t\t\t\t\t// Get the current scroll position.\n\t\t\t\t\tlet scrollPositionPX = this.$refs.bodyData.scrollTop;\n\n\t\t\t\t\t// Calculate the % (0 - 100) the scroll position is.\n\t\t\t\t\tlet scrollPositionPercent = scrollPositionPX / this.rendering.virtual.height;\n\n\t\t\t\t\t// Calculate the next potential render position in the data.\n\t\t\t\t\tlet potentialRenderPosition = Math.floor( this.processedDataSize * scrollPositionPercent );\n\n\t\t\t\t\t// Scrolling Up Check\n\t\t\t\t\tif ( scrollPositionPX < this.rendering.virtual.triggerTopPositionPX )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.rendering.virtual.triggerTopPositionPX >= 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Show the processing message.\n\t\t\t\t\t\t\tthis.updateStatus( 'processingData', true );\n\n\t\t\t\t\t\t\tthis.rendering.isScrolling = setTimeout( () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.renderView( Math.floor( this.processedDataSize * scrollPositionPercent ) );\n\t\t\t\t\t\t\t}, 500 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Scrolling Down Check.\n\t\t\t\t\tif ( scrollPositionPX > this.rendering.virtual.triggerBottomPositionPX )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.rendering.virtual.triggerBottomPositionPX >= 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Show the processing message.\n\t\t\t\t\t\t\tthis.updateStatus( 'processingData', true );\n\n\t\t\t\t\t\t\tthis.rendering.isScrolling = setTimeout( () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.renderView( Math.floor( this.processedDataSize * scrollPositionPercent ) );\n\t\t\t\t\t\t\t}, 750 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Checks the width of the JD-Table and sets the mobile size flag.\n\t\t\tcheckMobile : function ()\n\t\t\t{\n\t\t\t\tsetTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\tthis.status.mobileSize = false;\n\n\t\t\t\t\tif ( this.$refs.bodyData.clientWidth <= 320)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.status.mobileSize = true;\n\t\t\t\t\t}\n\t\t\t\t}, 220);\n\t\t\t},\n\n\t\t\t// Sets the row index that is currently being hovered over.\n\t\t\trowHover : function ( rowIndex, e )\n\t\t\t{\n\t\t\t\tthis.row.activeHoverIndex   = rowIndex;\n\t\t\t\tthis.row.activeHoverElement = e.srcElement.closest('.jd-row');\n\t\t\t},\n\n\t\t\t// Sets the column that is currently being hovered over.\n\t\t\tcellHover : function ( columnIndex )\n\t\t\t{\n\t\t\t\tthis.columns.activeHoverIndex = columnIndex;\n\t\t\t},\n\n\t\t\t// Checks if the body of the table has a scroll bar. This is important to align the head + body.\n\t\t\tcheckBodyScroll : function ()\n\t\t\t{\n\t\t\t\tsetTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\tthis.status.tableScroll = false;\n\n\t\t\t\t\t// Checks the table widths to see if scroll bar is enabled for body.\n\t\t\t\t\tif ( this.$refs.bodyData.scrollHeight > this.$refs.bodyData.clientHeight )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.status.tableScroll = true;\n\t\t\t\t\t}\n\t\t\t\t}, 100);\n\t\t\t},\n\n\t\t\t// Resets clears the current hovered column/row data.\n\t\t\tbodyLeave : function ()\n\t\t\t{\n\t\t\t\tif ( this.rendering.engine !== 0 )\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.columns.activeHoverIndex = null;\n\t\t\t},\n\n\t\t\t// Triggers the start of a resize event. Records the column to be resized and the starting X position.\n\t\t\tresizeStart : function ( columnIndex, e )\n\t\t\t{\n\t\t\t\t// Start a listener to stop the resize process.\n\t\t\t\twindow.addEventListener( 'mouseup', this.resizeStop , false );\n\n\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t{\n\t\t\t\t\tthis.columns.activeResize      = columnIndex;\n\t\t\t\t\tthis.columns.activeResizeStart = e.clientX;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t// Ends the column resize process.\n\t\t\tresizeStop : function ()\n\t\t\t{\n\t\t\t\t// Small delay to help with sort issue.\n\t\t\t\tsetTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\tthis.columns.activeResize = null;\n\t\t\t\t}, 75 );\n\n\t\t\t\t// Virtual Engine\n\t\t\t\tif ( this.setting.rendering === 0 )\n\t\t\t\t{\n\t\t\t\t\tthis.renderViewVirtual( this.rendering.virtual.rowMiddleIndex );\n\t\t\t\t}\n\n\t\t\t\twindow.removeEventListener( 'mouseup', this.resizeStop, false );\n\t\t\t},\n\n\t\t\t// Resets the scroll position to the top left of the table body.\n\t\t\tresetScroll : function ()\n\t\t\t{\n\t\t\t\t// Reset the render positions.\n\t\t\t\tthis.rendering.virtual.triggerTopPositionPX    = null;\n\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX = null;\n\n\t\t\t\t// This prevents the triggering of the onScroll function for body.\n\t\t\t\tthis.rendering.resettingScroll = true;\n\n\t\t\t\t// Reset the scroll position to top/left.\n\t\t\t\tthis.$refs.bodyData.scrollTop      = 0;\n\t\t\t\tthis.$refs.contentFrame.scrollLeft = 0;\n\n\t\t\t\tthis.$nextTick().then( () =>\n\t\t\t\t{\n\t\t\t\t\t// This prevents the triggering of the onScroll function for body.\n\t\t\t\t\tthis.rendering.resettingScroll = false;\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// Resizes the flagged column according to the clientX position.\n\t\t\tresizeDrag : function ( columnIndex, e )\n\t\t\t{\n\t\t\t\tif ( !this.setting.responsiveTable && this.columns.activeResize !== null )\n\t\t\t\t{\n\t\t\t\t\t// Extract the width number from the string.\n\t\t\t\t\tlet width = this.rendering.views.currentView.schema[columnIndex].width;\n\n\t\t\t\t\t// Shrink the width.\n\t\t\t\t\tif ( e.clientX < this.columns.activeResizeStart )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Calculate new width based off the existing width and start drag position and current client X.\n\t\t\t\t\t\twidth = width - ( this.columns.activeResizeStart - e.clientX );\n\t\t\t\t\t}\n\t\t\t\t\t// Expand the width.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Calculate new width based off the existing width and start drag position and current client X.\n\t\t\t\t\t\twidth = width + ( e.clientX - this.columns.activeResizeStart );\n\t\t\t\t\t}\n\n\t\t\t\t\t// If resizeForceMinWidth is enabled and the width is lower then start - reset width.\n\t\t\t\t\tif ( this.setting.resizeForceMinWidth && ( width < this.rendering.views.currentView.schema[columnIndex].originalWidth ) )\n\t\t\t\t\t{\n\t\t\t\t\t\twidth = this.setting.columns[columnIndex].width;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update the column width.\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].width                   = width;\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].headerStyles['width']   = width + 'px';\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].dataStyles['width']     = width + 'px';\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].dataStyles['min-width'] = width + 'px';\n\n\t\t\t\t\t// Update the initial drag position.\n\t\t\t\t\tthis.columns.activeResizeStart = e.clientX;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Changes the sort column and/or direction.\n\t\t\tchangeSort : function ( columnIndex, columnName, sortSpecial )\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'ChangeSort';\n\n\t\t\t\t// Prevent sort on resize.\n\t\t\t\tif ( this.columns.activeResize !== null )\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( !this.setting.columnSort )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\t// If the clicked column is the currently sorted column, reverse the sort.\n\t\t\t\tif ( this.columns.activeSortIndex === columnIndex )\n\t\t\t\t{\n\t\t\t\t\tthis.columns.activeSortAsc = !this.columns.activeSortAsc;\n\t\t\t\t}\n\t\t\t\t// Sort the new column ascending.\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.columns.activeSortIndex   = columnIndex;\n\t\t\t\t\tthis.columns.activeSortName    = columnName;\n\t\t\t\t\tthis.columns.activeSortAsc     = true;\n\t\t\t\t\tthis.columns.activeSortSpecial = sortSpecial;\n\t\t\t\t}\n\n\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t{\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Re-render the view.\n\t\t\t\t\tthis.renderView();\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Sorts the original data.\n\t\t\tsortData : function ()\n\t\t\t{\n\t\t\t\tif ( this.setting.dataProvider === 0 )\n\t\t\t\t{\n\t\t\t\t\tlet columnName        = this.rendering.views.currentView.schema[this.columns.activeSortIndex].name;\n\t\t\t\t\tlet columnSortType    = this.rendering.views.currentView.schema[this.columns.activeSortIndex].type;\n\t\t\t\t\tlet columnSortSpecial = this.rendering.views.currentView.schema[this.columns.activeSortIndex].sortSpecial;\n\n\t\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.processedData.sort( ( a, b ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Sort the data with null values.\n\t\t\t\t\t\t\tconst sortByNull = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif ( !x[columnName] || !x[columnName][0] )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( !y[columnName] || !y[columnName][0] )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif ( !x[columnName] )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( !y[columnName] )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sort the data by string.\n\t\t\t\t\t\t\tconst sortByString = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Special Sorting\n\t\t\t\t\t\t\t\tif ( columnSortSpecial )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// IP\n\t\t\t\t\t\t\t\t\tif ( columnSortSpecial.toLowerCase() === 'ip' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tx = x[columnName].split( '.' );\n\t\t\t\t\t\t\t\t\t\ty = y[columnName].split( '.' );\n\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0; i < x.length; i++ )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif ( ( x[i] = parseInt( x[i] ) ) < ( y[i] = parseInt( y[i] ) ) )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if ( x[i] > y[i] )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Normal String Sort\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx = x[columnName].toUpperCase();\n\t\t\t\t\t\t\t\t\ty = y[columnName].toUpperCase();\n\n\t\t\t\t\t\t\t\t\tif ( x < y )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( x > y )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Strings are the same.\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sort the data by number.\n\t\t\t\t\t\t\tconst sortByNumber = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn ( x[columnName] - y[columnName] ) * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sort the data by array. Sorts the first string in the array.\n\t\t\t\t\t\t\tconst sortByArray = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Special IP Sort\n\t\t\t\t\t\t\t\tif ( columnSortSpecial )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// IP\n\t\t\t\t\t\t\t\t\tif ( columnSortSpecial.toLowerCase() === 'ip' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tx = x[columnName][0].split( '.' );\n\t\t\t\t\t\t\t\t\t\ty = y[columnName][0].split( '.' );\n\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0; i < x.length; i++ )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif ( ( x[i] = parseInt( x[i] ) ) < ( y[i] = parseInt( y[i] ) ) )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if ( x[i] > y[i] )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Normal String Sort\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx = x[columnName][0].toUpperCase();\n\t\t\t\t\t\t\t\t\ty = y[columnName][0].toUpperCase();\n\n\t\t\t\t\t\t\t\t\tif ( x < y )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? 1 : -1 );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( x > y )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Strings are the same.\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Check for nulls.\n\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( !a[columnName] || !a[columnName][0] || !b[columnName] || !b[columnName][0] )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn sortByNull ( a, b );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( !a[columnName] || !b[columnName] )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn sortByNull ( a, b );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the column is a string, sort using string function.\n\t\t\t\t\t\t\tif ( columnSortType === 'String' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByString ( a, b );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the column is a Number, sort using Number function.\n\t\t\t\t\t\t\tif ( columnSortType === 'Number' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByNumber ( a, b );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the column is a Array, sort using Array function.\n\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByArray ( a, b );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Returns the appropriate sort title.\n\t\t\tsortTitle : function ( columnIndex )\n\t\t\t{\n\t\t\t\tif ( !this.setting.columnSort )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif ( this.columns.activeSortIndex === columnIndex && !this.columns.activeSortAsc )\n\t\t\t\t{\n\t\t\t\t\treturn 'Сортировать по возрастанию'\n\t\t\t\t}\n\n\t\t\t\treturn 'Сортировать по убыванию';\n\t\t\t},\n\n\t\t\t// Changes the selected filter dropdown focus.\n\t\t\tfilterDropdown : function ( columnIndex )\n\t\t\t{\n\t\t\t\tif ( this.filters.activeDropdown === columnIndex )\n\t\t\t\t{\n\t\t\t\t\t// Clear the selected filter dropdown.\n\t\t\t\t\tthis.filters.activeDropdown = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Create a mouse event listener to close the dropdown.\n\t\t\t\t\twindow.addEventListener( 'mouseup', this.clearFilterDropdown, false );\n\n\t\t\t\t\t// Show the dropdown menu.\n\t\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.activeDropdown = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.activeDropdown = columnIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Clears the dropdown as well as the window listener.\n\t\t\tclearFilterDropdown : function ( e )\n\t\t\t{\n\t\t\t\tif ( e.target.id !== 'filterDropDownMenu' )\n\t\t\t\t{\n\t\t\t\t\t// Clear the selected filter dropdown.\n\t\t\t\t\tthis.filters.activeDropdown = null;\n\n\t\t\t\t\t// Remove the listener.\n\t\t\t\t\twindow.removeEventListener( 'mouseup', this.clearFilterDropdown, false );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Helps build a filter to be applied to the table. Executed when filter dropdown item is clicked.\n\t\t\tbuildFilter : function ( itemIndex, item )\n\t\t\t{\n\t\t\t\t// Reset any error that may exist.\n\t\t\t\tthis.filters.error     = false;\n\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t// Column selection.\n\t\t\t\tif ( itemIndex === 0 )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.beingBuilt.column = this.filterableColumns[item];\n\n\t\t\t\t\tif ( this.filters.beingBuilt.option === null )\n\t\t\t\t\t{\n\t\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Activate the next tab.\n\t\t\t\t\t\t\tthis.filters.activeDropdown = 1;\n\n\t\t\t\t\t\t\t// Create a mouse event listener to close the dropdown.\n\t\t\t\t\t\t\twindow.addEventListener( 'mouseup', this.clearFilterDropdown, false );\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Option selection.\n\t\t\t\tif ( itemIndex === 1 )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.beingBuilt.option = item;\n\n\t\t\t\t\tif ( this.filters.beingBuilt.value === null )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.$refs.filterInput.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Adds the built filter to be applied to the table.\n\t\t\taddFilter : function ()\n\t\t\t{\n\t\t\t\t// Manage Data Availability.\n\t\t\t\tif ( this.setting.dataProvider === 0 && this.data.length === 0 )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.errorText = 'Нет данных для фильтрации.';\n\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t}\n\n\t\t\t\t// Manage column error.\n\t\t\t\tif ( this.filters.beingBuilt.column === null || typeof( this.filters.beingBuilt.column ) !== 'object' )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.errorText = 'Для добавления фильтра необходимо выбрать столбец.';\n\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t}\n\n\t\t\t\t// Manage option error.\n\t\t\t\tif ( this.filters.beingBuilt.option === null || typeof( this.filters.beingBuilt.option ) !== 'string' )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.errorText = 'Для добавления фильтра необходимо выбрать тип фильтра.';\n\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( this.filters.beingBuilt.option === 'Больше / Равно' && isNaN( this.filters.beingBuilt.value ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.errorText = 'Значение должно быть числом.';\n\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.filters.beingBuilt.option === 'Меньше / Равно' && isNaN( this.filters.beingBuilt.value ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.errorText = 'Значение должно быть числом.';\n\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Manage value error.\n\t\t\t\tif ( this.filters.beingBuilt.value === null || typeof( this.filters.beingBuilt.value ) !== 'string' )\n\t\t\t\t{\n\t\t\t\t\tthis.filters.errorText = 'Для добавления фильтра необходимо ввести значение фильтра.';\n\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t}\n\n\t\t\t\t// If there are no errors, continue.\n\t\t\t\tif ( !this.filters.error )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'AddFilter';\n\n\t\t\t\t\t// Create a copy of the filter.\n\t\t\t\t\tlet filter =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcolumn : this.filters.beingBuilt.column,\n\t\t\t\t\t\t\toption : this.filters.beingBuilt.option,\n\t\t\t\t\t\t\tvalue  : this.filters.beingBuilt.value\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Add the filter.\n\t\t\t\t\tthis.filters.active.push( filter );\n\n\t\t\t\t\t// Clear being built.\n\t\t\t\t\tthis.filters.beingBuilt.column = null;\n\t\t\t\t\tthis.filters.beingBuilt.option = null;\n\t\t\t\t\tthis.filters.beingBuilt.value  = null;\n\n\t\t\t\t\t// Reset the scroll position to top/left.\n\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t// dataProvider = 1 | Filtering is performed externally (emitted).\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\t// dataProvider = 0 | Filtering is performed on the data that exists in the JD-Table component.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Removes a filter from the active list.\n\t\t\tremoveFilter : function ( index )\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'RemoveFilter';\n\n\t\t\t\t// Reset any error that may exist.\n\t\t\t\tthis.filters.error     = false;\n\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\tthis.filters.active.splice( index, 1 );\n\n\t\t\t\t// dataProvider = 1 | Filtering is performed externally (emitted).\n\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t{\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t}\n\t\t\t\t// dataProvider = 0 | Filtering is performed on the data that exists in the JD-Table component.\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Clears all active filters and being built.\n\t\t\tclearAllFilters : function ()\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'ClearFilter';\n\n\t\t\t\t// Clear being built.\n\t\t\t\tthis.filters.beingBuilt.column = null;\n\t\t\t\tthis.filters.beingBuilt.option = null;\n\t\t\t\tthis.filters.beingBuilt.value  = null;\n\n\t\t\t\t// Reset any error that may exist.\n\t\t\t\tthis.filters.error     = false;\n\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t// Clear active.\n\t\t\t\tthis.filters.active = [];\n\n\t\t\t\t// dataProvider = 1 | Filtering is performed externally (emitted).\n\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t{\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t}\n\t\t\t\t// dataProvider = 0 | Filtering is performed on the data that exists in the JD-Table component.\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Changes the column visibility. Adds/removes column from view.\n\t\t\tcolumnSelection : function ( selectedColumn )\n\t\t\t{\n\t\t\t\t// If disabling, enforce at least 1 enabled.\n\t\t\t\tif ( selectedColumn.enabled )\n\t\t\t\t{\n\t\t\t\t\tlet enabledCount = 0;\n\n\t\t\t\t\t// Check how many are enabled.\n\t\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( column ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( column.enabled )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tenabledCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// Must have at least 1 enabled to disable.\n\t\t\t\t\tif ( enabledCount > 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Spice column out of currentView.\n\t\t\t\t\t\tlet columnToSplice = this.rendering.views.currentView.schema.findIndex( ( viewColumn ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn selectedColumn.name === viewColumn.name;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Update column.\n\t\t\t\t\t\tselectedColumn.enabled      = false;\n\t\t\t\t\t\tthis.columns.selectionError = false;\n\n\t\t\t\t\t\t// Remove from array.\n\t\t\t\t\t\tthis.rendering.views.currentView.schema.splice( columnToSplice, 1 );\n\n\t\t\t\t\t\t// Check mobile size.\n\t\t\t\t\t\tthis.checkMobile();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.selectionError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.columns.selectionError = false;\n\t\t\t\t\tselectedColumn.enabled      = true;\n\n\t\t\t\t\t// Add to array. The view isn't sorted, its just added to the end.\n\t\t\t\t\tthis.rendering.views.currentView.schema.push( selectedColumn );\n\n\t\t\t\t\t// Check mobile size.\n\t\t\t\t\tthis.checkMobile();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Performs the search action.\n\t\t\tperformSearch : function ()\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'ApplySearch';\n\n\t\t\t\tif ( !this.search.text )\n\t\t\t\t{\n\t\t\t\t\tif ( this.search.searching )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.clearSearch();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Emit search event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'searching', true );\n\n\t\t\t\t\t\tthis.search.searching = true;\n\t\t\t\t\t}\n\t\t\t\t\t// Perform search using JD-Table.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.data.length > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.updateStatus( 'searching', true );\n\n\t\t\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.updateStatus( 'searching', false );\n\n\t\t\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Clears the search.\n\t\t\tclearSearch : function ()\n\t\t\t{\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'ClearSearch';\n\n\t\t\t\t// Clear search data.\n\t\t\t\tthis.search.text       = '';\n\t\t\t\tthis.search.searching  = false;\n\n\t\t\t\tthis.resetScroll();\n\n\t\t\t\tthis.processData().then( () =>\n\t\t\t\t{\n\t\t\t\t\t// Emit search event.\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.emitState();\n\t\t\t\t});\n\t\t\t},\n\n\t\t\t// Called when user selects the \"Quick View\" option from the left/right click context menu of a row.\n\t\t\tcontextQuickView : function ()\n\t\t\t{\n\t\t\t\t// Reset any visible feature options.\n\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t// Show the quick view.\n\t\t\t\tthis.row.selectedIndex = this.row.activeContextIndex;\n\t\t\t},\n\n\t\t\t// Called when user selects the \"View\" option from the left/right click context menu of a row.\n\t\t\tcontextView : function ( newWindow )\n\t\t\t{\n\t\t\t\t// Reset any visible feature options.\n\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'ViewItem';\n\n\t\t\t\tif ( newWindow )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'ViewItemNewWindow';\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Called when user selects the \"Edit\" option from the left/right click context menu of a row.\n\t\t\tcontextEdit : function ( newWindow )\n\t\t\t{\n\t\t\t\t// Reset any visible feature options.\n\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'EditItem';\n\n\t\t\t\tif ( newWindow )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'EditItemNewWindow';\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Called when user selects the \"Delete\" option from the left/right click context menu of a row.\n\t\t\tcontextDelete : function ()\n\t\t\t{\n\t\t\t\t// Reset any visible feature options.\n\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'DeleteItem';\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Called when user selects the \"Add\" option from the left/right click context menu of a row.\n\t\t\tcontextAdd : function ( newWindow )\n\t\t\t{\n\t\t\t\t// Reset any visible feature options.\n\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t// Update the last action performed.\n\t\t\t\tthis.status.lastAction = 'AddItem';\n\n\t\t\t\tif ( newWindow )\n\t\t\t\t{\n\t\t\t\t\t// Update the last action performed.\n\t\t\t\t\tthis.status.lastAction = 'AddItemNewWindow';\n\t\t\t\t}\n\n\t\t\t\tthis.emitState();\n\t\t\t},\n\n\t\t\t// Called when user single (left) clicks on a data row. Accepts the index of the data on the this.data.\n\t\t\trowActionSingle : function ( rowIndex )\n\t\t\t{\n\t\t\t\tif ( this.setting.quickView === 1 && !this.setting.contextMenuLeft )\n\t\t\t\t{\n\t\t\t\t\t// If the menu is visible already ..\n\t\t\t\t\tif ( this.status.contextMenu )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideContextMenu();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t\t// Add a highlight to the quick view row.\n\t\t\t\t\tthis.row.activeContextIndex   = this.row.activeHoverIndex;\n\t\t\t\t\tthis.row.activeContextElement = this.row.activeHoverElement;\n\n\t\t\t\t\t// Make the row red.\n\t\t\t\t\tthis.row.activeContextElement.classList.add('jd-rowSelect');\n\n\t\t\t\t\t// Show the quick view.\n\t\t\t\t\tthis.row.selectedIndex = rowIndex;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Called when user double clicks on a data row. Accepts the index of the data on the this.data.\n\t\t\trowActionDouble : function ( rowIndex )\n\t\t\t{\n\t\t\t\tif ( this.setting.quickView === 2 && !this.setting.contextMenuLeft )\n\t\t\t\t{\n\t\t\t\t\t// If the menu is visible already ..\n\t\t\t\t\tif ( this.status.contextMenu )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideContextMenu();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.featureAction( null );\n\n\t\t\t\t\t// Add a highlight to the quick view row.\n\t\t\t\t\tthis.row.activeContextIndex   = this.row.activeHoverIndex;\n\t\t\t\t\tthis.row.activeContextElement = this.row.activeHoverElement;\n\n\t\t\t\t\t// Make the row red.\n\t\t\t\t\tthis.row.activeContextElement.classList.add('jd-rowSelect');\n\n\t\t\t\t\t// Show the quick view.\n\t\t\t\t\tthis.row.selectedIndex = rowIndex;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Called when the quick view window is closed.\n\t\t\tquickViewClose : function ()\n\t\t\t{\n\t\t\t\t// Remove the row red.\n\t\t\t\tthis.row.activeContextElement.classList.remove('jd-rowSelect');\n\n\t\t\t\t// Update the index of the row right clicked on.\n\t\t\t\tthis.row.activeContextIndex   = null;\n\t\t\t\tthis.row.activeContextElement = null;\n\n\t\t\t\t// Hide the quick view.\n\t\t\t\tthis.row.selectedIndex = null;\n\t\t\t},\n\n\t\t\t// Called when the NEXT button is pressed on the quick view.\n\t\t\tquickViewNext : function ()\n\t\t\t{\n\t\t\t\t// External\n\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t{\n\t\t\t\t\tif ( this.row.selectedIndex < ( this.processedDataSize ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.data[ this.row.selectedIndex + 1 ] != null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.row.selectedIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Check for last page\n\t\t\t\t\t\t\tif ( this.rendering.pagination.currentEndIndex !== this.processedDataSize )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Need more data (move to next page).\n\t\t\t\t\t\t\t\tthis.paginationNext();\n\n\t\t\t\t\t\t\t\tthis.row.selectedIndex = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Internal\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( this.row.selectedIndex < ( this.processedData.length - 1 ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.row.selectedIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Called when the PREVIOUS button is pressed on the quick view.\n\t\t\tquickViewPrevious : function ()\n\t\t\t{\n\t\t\t\t// External\n\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t{\n\t\t\t\t\tif ( this.row.selectedIndex === 0 && this.rendering.pagination.currentPage !== 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Need more data (move to previous page).\n\t\t\t\t\t\tthis.paginationPrevious();\n\n\t\t\t\t\t\tthis.row.selectedIndex = this.data.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.row.selectedIndex >= 1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.row.selectedIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Internal\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( this.row.selectedIndex >= 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.row.selectedIndex--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Prints the element.\n\t\t\tprint : function ( elementRef )\n\t\t\t{\n\t\t\t\tlet contentToPrinter = this.$refs[elementRef].innerHTML;\n\t\t\t\tlet styles           = \"<style>.contentRow { display : flex; flex-direction : column; width : 100%; } .rowTitle { display : flex; align-items : center; font-size : 1rem; font-weight : 600; word-break : break-all; padding : 0.5rem 1rem; } .rowData { display : flex; align-items : center;padding : 0.2rem 1rem; word-break : break-all; }</style>\";\n\t\t\t\tlet printWindow      = window.open( '', 'На печать', 'height=600, width=800');\n\n\t\t\t\tprintWindow.document.write('<html><head><title>Print</title>');\n\t\t\t\tprintWindow.document.write(styles);\n\t\t\t\tprintWindow.document.write('</head><body >');\n\t\t\t\tprintWindow.document.write(contentToPrinter);\n\t\t\t\tprintWindow.document.write('</body></html>');\n\n\t\t\t\tprintWindow.document.close();\n\t\t\t\tprintWindow.focus();\n\t\t\t\tprintWindow.print();\n\t\t\t\tprintWindow.close();\n\t\t\t},\n\n\t\t\t// Clears all data from table.\n\t\t\tclearTable : function ()\n\t\t\t{\n\t\t\t\t// Clear data.\n\t\t\t\tthis.processedData = [];\n\t\t\t\tthis.data          = [];\n\n\t\t\t\t// Clear Search\n\t\t\t\tthis.search.searching = false;\n\t\t\t\tthis.search.text      = \"\";\n\n\t\t\t\t// Clear Filters\n\t\t\t\tthis.filters.active            = [];\n\t\t\t\tthis.filters.activeDropdown    = null;\n\t\t\t\tthis.filters.beingBuilt.column = null;\n\t\t\t\tthis.filters.beingBuilt.option = null;\n\t\t\t\tthis.filters.beingBuilt.value  = null;\n\t\t\t\tthis.filters.error             = false;\n\t\t\t\tthis.filters.errorText         = \"\";\n\t\t\t\tthis.filters.show              = false;\n\n\t\t\t\t// Reset pagination.\n\t\t\t\tthis.rendering.pagination.currentPage           = 1;\n\t\t\t\tthis.rendering.pagination.currentPageHightlight = null;\n\t\t\t\tthis.rendering.pagination.currentStartIndex     = null;\n\t\t\t\tthis.rendering.pagination.currentEndIndex       = null;\n\t\t\t\tthis.rendering.pagination.availablePages        = null;\n\t\t\t\tthis.rendering.pagination.currentPageRows       = this.rendering.pagination.currentSelectedPageRowOption;\n\t\t\t\tthis.rendering.pagination.changingRows          = false;\n\t\t\t\tthis.rendering.pagination.leftPages             = [];\n\t\t\t\tthis.rendering.pagination.rightPages            = [];\n\n\t\t\t\t// Reset virtual.\n\t\t\t\tthis.rendering.virtual.rowBottomIndex           = 0;\n\t\t\t\tthis.rendering.virtual.rowTopIndex              = 0;\n\t\t\t\tthis.rendering.virtual.rowMiddleIndex           = 0;\n\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX  = 0;\n\t\t\t\tthis.rendering.virtual.triggerTopPositionPX     = 0;\n\t\t\t\tthis.rendering.virtual.height                   = 0;\n\n\t\t\t\t// Reset external.\n\t\t\t\tthis.rendering.external.dataSize = null;\n\n\t\t\t\t// Selection\n\t\t\t\tthis.row.selectedIndex = null;\n\n\t\t\t\t// Stop any processing messaging.\n\t\t\t\tthis.updateStatus( 'processingData', false );\n\n\t\t\t\t// Reset scroll positions.\n\t\t\t\tthis.resetScroll();\n\n\t\t\t\t// Clean the view.\n\t\t\t\tthis.currentTableData = [];\n\t\t\t},\n\n\t\t\t// Displays the appropriate table message based on component status.\n\t\t\tupdateStatus : function ( statusName, state )\n\t\t\t{\n\t\t\t\tthis.status.searching      = false;\n\t\t\t\tthis.status.updatingPage   = false;\n\t\t\t\tthis.status.processingData = false;\n\n\t\t\t\tif ( statusName === 'processingData' )\n\t\t\t\t{\n\t\t\t\t\tthis.status.processingData = state;\n\t\t\t\t}\n\n\t\t\t\tif ( statusName === 'searching' )\n\t\t\t\t{\n\t\t\t\t\tthis.status.searching = state;\n\t\t\t\t}\n\n\t\t\t\tif ( statusName === 'updatingPage' )\n\t\t\t\t{\n\t\t\t\t\tthis.status.updatingPage = state;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Convert raw number to formatted.\n\t\t\tformatNumberWithCommas : function ( x )\n\t\t\t{\n\t\t\t\tif ( x )\n\t\t\t\t{\n\t\t\t\t\treturn x.toString().replace( /\\B(?=(\\d{3})+(?!\\d))/g, \",\" );\n\t\t\t\t}\n\n\t\t\t\treturn 0;\n\t\t\t},\n\n\t\t\t// Returns the number of rows that can fit in the current view.\n\t\t\tgetRowsInView : function ()\n\t\t\t{\n\t\t\t\t// Get the current height of the table body container.\n\t\t\t\tlet viewHeight = this.$refs.bodyData.clientHeight;\n\n\t\t\t\treturn Math.ceil( viewHeight / this.setting.rowHeight );\n\t\t\t},\n\n\t\t\t// Checks if the browser is a version of Internet Explorer.\n\t\t\tcheckBrowser : function ()\n\t\t\t{\n\t\t\t\t// Checks if browser is IE11.\n\t\t\t\tif ( navigator.userAgent.indexOf('MSIE')!==-1  || navigator.appVersion.indexOf('Trident/') > -1 )\n\t\t\t\t{\n\t\t\t\t\tthis.status.isIE11 = true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.status.isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tcomputed :\n\t\t{\n\t\t\t// View flag. Enabled if the view has data. False if not.\n\t\t\tisViewAvailable : function ()\n\t\t\t{\n\t\t\t\treturn this.currentTableData.length > 0;\n\t\t\t},\n\n\t\t\t// Normalizes the initialize settings in case one or more properties are not configured.\n\t\t\tsetting : function ()\n\t\t\t{\n\t\t\t\treturn Object.assign (\n\t\t\t\t\t{\n\t\t\t\t\t\t// Data Provider\n\t\t\t\t\t\tdataProvider : 0,\n\n\t\t\t\t\t\t// Column Data\n\t\t\t\t\t\tcolumns             : [],\n\n\t\t\t\t\t\t// Features\n\t\t\t\t\t\tstartBySearch                : false,\n\t\t\t\t\t\tstartBySearchMessage         : null,\n\t\t\t\t\t\tstartBySearchArrowSearch     : false,\n\t\t\t\t\t\tstartBySearchArrowFilter     : false,\n\t\t\t\t\t\tstartBySearchArrowSearchText : 'Поиск',\n\t\t\t\t\t\tstartBySearchArrowFilterText : 'Фильтровать по столбцам',\n\t\t\t\t\t\tmaxMinimize                  : true,\n\t\t\t\t\t\trefresh                      : true,\n\t\t\t\t\t\tsearch                       : true,\n\t\t\t\t\t\tcolumnSelect                 : true,\n\t\t\t\t\t\taddNew                       : false,\n\t\t\t\t\t\teditItem                     : false,\n\t\t\t\t\t\tviewItem                     : false,\n\t\t\t\t\t\tdeleteItem                   : false,\n\t\t\t\t\t\tresize                       : true,\n\t\t\t\t\t\tfilter                       : true,\n\t\t\t\t\t\texport                       : true,\n\t\t\t\t\t\texportLimit                  : null,\n\t\t\t\t\t\tcolumnSort                   : true,\n\t\t\t\t\t\tquickView\t\t\t         : 1,\n\t\t\t\t\t\tcontextMenuRight             : false,\n\t\t\t\t\t\tcontextMenuLeft              : false,\n\t\t\t\t\t\tcontextMenuQuickView         : true,\n\t\t\t\t\t\tcontextMenuView              : true,\n\t\t\t\t\t\tcontextMenuEdit              : true,\n\t\t\t\t\t\tcontextMenuDelete            : true,\n\t\t\t\t\t\tcontextMenuAdd               : true,\n\n\t\t\t\t\t\t// Rendering\n\t\t\t\t\t\trenderEngine                   : 2,\n\t\t\t\t\t\tresponsiveFrame                : true,\n\t\t\t\t\t\tresponsiveFrameForceFullWidth  : false,\n\t\t\t\t\t\tresponsiveTable                : true,\n\t\t\t\t\t\tvirtualEngineRowStart          : 250,\n\t\t\t\t\t\tframeWidth                     : null,\n\t\t\t\t\t\theaderHeight                   : 40,\n\t\t\t\t\t\tdataHeight                     : 400,\n\t\t\t\t\t\trowHeight                      : 42,\n\t\t\t\t\t\tpaginationRowLimits            : [50, 100, 200],\n\t\t\t\t\t\tpaginationRowStart             : 50,\n\t\t\t\t\t\tpaginationRowAll               : true,\n\t\t\t\t\t\tpageSideQuantity               : 5,\n\n\t\t\t\t\t\t// Search\n\t\t\t\t\t\tforceSearchOpen     : false,\n\t\t\t\t\t\tsearchPlaceHolder   : null,\n\n\t\t\t\t\t\t// Settings\n\t\t\t\t\t\tstartMaximized      : false,\n\t\t\t\t\t\tforceMaximized      : false,\n\t\t\t\t\t\trowZebra            : true,\n\t\t\t\t\t\trowFlex             : true,\n\t\t\t\t\t\tresizeForceMinWidth : true,\n\n\t\t\t\t\t\t//Layers\n\t\t\t\t\t\thighlight           : true,\n\t\t\t\t\t\tcontrols            : true,\n\t\t\t\t\t\tfooter              : true,\n\n\t\t\t\t\t\ttitle               : null,\n\t\t\t\t\t\tviews               : []\n\t\t\t\t\t}, this.option\n\t\t\t\t);\n\t\t\t},\n\n\t\t\t// Returns the total number of rows in the data.\n\t\t\tprocessedDataSize : function ()\n\t\t\t{\n\t\t\t\t// Check if data is being fed from externally.\n\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t{\n\t\t\t\t\treturn this.rendering.external.dataSize;\n\t\t\t\t}\n\n\t\t\t\treturn this.processedData.length;\n\t\t\t},\n\n\t\t\t// Returns true if there are active filters.\n\t\t\tfiltering : function ()\n\t\t\t{\n\t\t\t\treturn this.filters.active.length > 0;\n\t\t\t},\n\n\t\t\t// Returns TRUE or FALSE based on if resize should be enabled.\n\t\t\tresizable : function ()\n\t\t\t{\n\t\t\t\tif ( !this.setting.responsiveTable && this.setting.resize )\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t// Apply class to JD-Table frame based on settings.\n\t\t\tframeClasses : function ()\n\t\t\t{\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\treturn 'jd-maximized';\n\t\t\t\t}\n\n\t\t\t\tif ( !this.setting.dataHeight )\n\t\t\t\t{\n\t\t\t\t\treturn 'jd-fullBody';\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\n\t\t\t// Apply class to JD-Table frame based on settings.\n\t\t\tframeStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( !this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\tif ( !this.setting.responsiveFrame )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.frameWidth !== null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['width']     = this.setting.frameWidth + 'px';\n\t\t\t\t\t\t\tstyles['min-width'] = this.setting.frameWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['width'] ='100%';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Ensures the frame does get larger then the sum of all the column width's in PX.\n\t\t\t\t\tif ( this.setting.responsiveFrame && !this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( !this.setting.responsiveFrameForceFullWidth )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Apply class to controlSearch based on settings.\n\t\t\tcontrolSearchClasses : function ()\n\t\t\t{\n\t\t\t\tif ( this.feature.searching )\n\t\t\t\t{\n\t\t\t\t\treturn 'jd-searching';\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\n\t\t\t// Apply class to controlFilter based on settings.\n\t\t\tcontrolFilterClasses : function ()\n\t\t\t{\n\t\t\t\tlet classes = '';\n\n\t\t\t\tif ( this.filters.show )\n\t\t\t\t{\n\t\t\t\t\tclasses = 'jd-selected';\n\t\t\t\t}\n\n\t\t\t\tif ( this.filtering )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-active';\n\t\t\t\t}\n\n\t\t\t\treturn classes;\n\t\t\t},\n\n\t\t\t// Apply class to search icon based on searching status.\n\t\t\tsearchIconClasses : function ()\n\t\t\t{\n\t\t\t\tlet classes = '';\n\n\t\t\t\tif ( this.setting.forceSearchOpen )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-noSelect';\n\t\t\t\t}\n\n\t\t\t\tif ( this.feature.searching )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-search jd-selected';\n\t\t\t\t}\n\n\t\t\t\tif ( this.search.searching )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-active';\n\t\t\t\t}\n\n\t\t\t\tif ( !this.feature.searching && !this.setting.forceSearchOpen )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-notActive'\n\t\t\t\t}\n\n\t\t\t\treturn classes;\n\t\t\t},\n\n\t\t\t// Change search icon title based on searching status.\n\t\t\tsearchIconTitle : function ()\n\t\t\t{\n\t\t\t\tif ( this.feature.searching )\n\t\t\t\t{\n\t\t\t\t\treturn 'Скрыть поиск';\n\t\t\t\t}\n\n\t\t\t\treturn 'Показать поиск';\n\t\t\t},\n\n\t\t\t// Apply class to controlFeature based on settings.\n\t\t\tcontrolFeatureClasses : function ()\n\t\t\t{\n\t\t\t\tif ( this.feature.searching )\n\t\t\t\t{\n\t\t\t\t\treturn 'jd-searching';\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t},\n\n\t\t\t// Apply class to min/maximize icon based on min/maximize status.\n\t\t\tminMaxIconClasses : function ()\n\t\t\t{\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\treturn 'fas fa-window-minimize';\n\t\t\t\t}\n\n\t\t\t\treturn 'far fa-window-maximize';\n\t\t\t},\n\n\t\t\t// Change min/maximize icon title based on min/maximize status.\n\t\t\tminMaxIconTitle : function ()\n\t\t\t{\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\treturn 'Минимизировать';\n\t\t\t\t}\n\n\t\t\t\treturn 'Максимизировать';\n\t\t\t},\n\n\t\t\t// Apply styles to layerContent based on settings.\n\t\t\tlayerContentStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( !this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\t// responsiveFrame = TRUE\n\t\t\t\t\tif ( this.setting.responsiveFrame )\n\t\t\t\t\t{\n\t\t\t\t\t\t// responsiveTable = FALSE\n\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Create scroll back in layerContent.\n\t\t\t\t\t\t\tstyles['overflow-y'] = 'auto';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Apply styles to the content table based on settings.\n\t\t\ttableStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\t// responsiveTable = FALSE\n\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t{\n\t\t\t\t\tstyles['min-width'] = this.tableWidth + 'px';\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Apply styles to the table head based on settings.\n\t\t\ttableHeadStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tstyles['height'] = this.setting.headerHeight + 'px';\n\t\t\t\tstyles['min-height'] = this.setting.headerHeight + 'px';\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Apply class to table head cells based on settings.\n\t\t\theadCellClasses : function ()\n\t\t\t{\n\t\t\t\tlet classes = '';\n\n\t\t\t\tif ( this.setting.columnSort )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-sort';\n\t\t\t\t}\n\n\t\t\t\tif ( this.status.tableScroll )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-scrollBuffer';\n\t\t\t\t}\n\n\t\t\t\treturn classes;\n\t\t\t},\n\n\t\t\t// Apply styles to the content table body based on settings.\n\t\t\ttableBodyStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( !this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\tstyles['height'] = this.setting.dataHeight + 'px';\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Apply styles to the content table virtual body based on settings.\n\t\t\tbodyVirtualStyles : function ()\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\theight : this.rendering.virtual.height + 'px'\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// Apply styles to feature option zone based on settings.\n\t\t\toptionDropdownStyles : function ()\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\t'max-height' : ( this.setting.dataHeight + this.setting.headerHeight ) + 'px'\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// Apply styles to the content table body data container based on settings.\n\t\t\tbodyViewStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles =\n\t\t\t\t{\n\t\t\t\t\t'width': '100%'\n\t\t\t\t};\n\n\t\t\t\tif ( this.rendering.engine === 0 )\n\t\t\t\t{\n\t\t\t\t\tstyles['position'] = 'absolute';\n\t\t\t\t\tstyles['top']      =( this.rendering.virtual.rowTopIndex * this.setting.rowHeight ) + 'px';\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Apply class to table body row based on settings.\n\t\t\tviewRowClasses : function ()\n\t\t\t{\n\t\t\t\tlet classes = '';\n\n\t\t\t\tif ( this.setting.rowZebra )\n\t\t\t\t{\n\t\t\t\t\tclasses += ' jd-zebra';\n\t\t\t\t}\n\n\t\t\t\treturn classes;\n\t\t\t},\n\n\t\t\t// Apply styles to the content table body data row based on settings.\n\t\t\tviewRowStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t{\n\t\t\t\t\tstyles['min-height'] = this.setting.rowHeight + 'px';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyles['height'] = this.setting.rowHeight + 'px';\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\trowDataClasses : function ()\n\t\t\t{\n\t\t\t\tlet classes = '';\n\n\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t{\n\t\t\t\t\tclasses = 'jd-rowFlex';\n\t\t\t\t}\n\n\t\t\t\treturn classes;\n\t\t\t},\n\n\t\t\t// Calculate the total width of the table based on the column size.\n\t\t\ttableWidth : function ()\n\t\t\t{\n\t\t\t\tlet totalWidth   = 0;\n\t\t\t\tlet missingWidth = false;\n\n\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( column ) =>\n\t\t\t\t{\n\t\t\t\t\tif ( column.enabled )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( column.width !== null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalWidth += column.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmissingWidth = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// If a column width is not set, the total width cannot be determined.\n\t\t\t\tif ( !this.setting.responsiveTable && missingWidth )\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn totalWidth;\n\t\t\t},\n\n\t\t\t// Returns a list of filterable columns.\n\t\t\tfilterableColumns : function ()\n\t\t\t{\n\t\t\t\tlet filterableColumns = [];\n\n\t\t\t\tthis.columns.list.forEach( ( column ) =>\n\t\t\t\t{\n\t\t\t\t\tif ( column.filterable )\n\t\t\t\t\t{\n\t\t\t\t\t\tfilterableColumns.push( column );\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn filterableColumns;\n\t\t\t},\n\n\t\t\t// Returns a list of filter options based on the selected column.\n\t\t\tfilterableOptions : function ()\n\t\t\t{\n\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t{\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tif ( this.filters.beingBuilt.column.type === 'String' )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ['Равно', 'Содержит', 'Не равно'];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ['Равно', 'Содержит', 'Не равно', 'Начинается с'];\n\t\t\t\t}\n\n\t\t\t\tif ( this.filters.beingBuilt.column.type === 'Array' )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ['Содержит'];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ['Содержит'];\n\t\t\t\t}\n\n\t\t\t\tif ( this.filters.beingBuilt.column.type === 'Number' )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ['Равно', 'Больше / Равно', 'Меньше / Равно', 'Содержит', 'Не равно'];\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ['Равно', 'Больше / Равно', 'Меньше / Равно', 'Содержит', 'Не равно', 'Начинается с'];\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Returns the text shown on the selected filter column.\n\t\t\tfilterColumnText : function ()\n\t\t\t{\n\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t{\n\t\t\t\t\treturn 'Выберите столбец ..'\n\t\t\t\t}\n\n\t\t\t\treturn this.filters.beingBuilt.column.title;\n\t\t\t},\n\n\t\t\t// Returns the text shown on the selected filter option.\n\t\t\tfilterOptionText : function ()\n\t\t\t{\n\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t{\n\t\t\t\t\treturn 'Выберите фильтр ..';\n\t\t\t\t}\n\n\t\t\t\tif ( this.filters.beingBuilt.option === null )\n\t\t\t\t{\n\t\t\t\t\treturn 'Фильтр ..'\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn this.filters.beingBuilt.option;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// Returns the styles for the layerHighlight div.\n\t\t\tlayerHighlightStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Returns the styles for the layerControl div.\n\t\t\tlayerControlStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Returns the styles for the layerOption div.\n\t\t\tlayerOptionStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Returns the styles for the layerFooter div.\n\t\t\tlayerFooterStyles : function ()\n\t\t\t{\n\t\t\t\tlet styles = {};\n\n\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn styles;\n\t\t\t},\n\n\t\t\t// Returns the status of the Getting Started message.\n\t\t\tgettingStarted : function ()\n\t\t\t{\n\t\t\t\tif ( !this.status.processingData && !this.loader && this.setting.startBySearch )\n\t\t\t\t{\n\t\t\t\t\tif ( !this.search.searching && !this.filtering )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t// Returns the status for displaying the no data message.\n\t\t\tnoDataMessage : function ()\n\t\t\t{\n\t\t\t\tif ( !this.status.processingData && !this.processedDataSize && !this.loader && !this.isViewAvailable && !this.status.updatingPage && !this.status.searching && this.tableReady )\n\t\t\t\t{\n\t\t\t\t\tif ( !this.gettingStarted )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t// Returns true if any of the option menus are shown and false if none.\n\t\t\tmenuVisible : function ()\n\t\t\t{\n\t\t\t\tif ( this.filters.show || this.rendering.pagination.changingRows || this.columns.selecting || this.rendering.views.changingViews )\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t},\n\n\t\t\t// Represents the current state of data of the component. This is emitted to parent events.\n\t\t\tcomponentState : function ()\n\t\t\t{\n\t\t\t\treturn {\n\t\t\t\t\tsearchApplied   : this.search.searching,\n\t\t\t\t\tsearchText      : this.search.text,\n\t\t\t\t\tfilterApplied   : this.filters.active,\n\t\t\t\t\tpageLimit       : this.rendering.pagination.currentSelectedPageRowOption,\n\t\t\t\t\tcurrentPage     : this.rendering.pagination.currentPage,\n\t\t\t\t\tlastAction      : this.status.lastAction,\n\t\t\t\t\tsortColumn      : this.columns.activeSortName ? this.columns.activeSortName : this.rendering.views.currentView.schema[0].name,\n\t\t\t\t\tsortColumnIndex : this.columns.activeSortIndex ? this.columns.activeSortIndex : 0,\n\t\t\t\t\tsortDirection   : this.columns.activeSortAsc ? 'ASC' : 'DESC',\n\t\t\t\t\tsortSpecial     : this.columns.activeSortSpecial ? this.columns.activeSortSpecial : null,\n\t\t\t\t\tselectedItem    : this.row.selectedIndex !== null ? this.currentTableData[ this.row.selectedIndex ] : this.row.activeContextIndex !== null ? this.currentTableData[ this.row.activeContextIndex ] : null,\n\t\t\t\t\tselectedIndex   : this.row.selectedIndex !== null ? this.row.selectedIndex : this.row.activeContextIndex !== null  ? this.row.activeContextIndex : null,\n\t\t\t\t\tcurrentView     : this.rendering.views.currentView\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\twatch :\n\t\t{\n\t\t\t// Watches for event triggers. This will run the event when the trigger is true.\n\t\t\teventFromAppTrigger : function ( to , from )\n\t\t\t{\n\t\t\t\tif ( from === false && to === true && this.eventFromApp.name )\n\t\t\t\t{\n\t\t\t\t\tthis.processEvent( this.eventFromApp.name );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n<style scoped lang=\"scss\"></style>\n","import './assets/jd-table.scss';\nimport component from './jd-table.vue';\n\nexport function install( Vue )\n{\n\tif ( install.installed )\n\t{\n\t\treturn;\n\t}\n\n\tinstall.installed = true;\n\n\tVue.component( 'jdtable', component );\n}\n\nconst plugin =\n{\n\tinstall\n};\n\nlet GlobalVue = null;\n\nif ( typeof window !== 'undefined' )\n{\n\tGlobalVue = window.Vue;\n}\nelse if ( typeof global !== 'undefined' )\n{\n\tGlobalVue = global.Vue;\n}\n\nif ( GlobalVue )\n{\n\tGlobalVue.use( plugin );\n}\n\ncomponent.install = install;\n\nexport default component;"],"names":["module","download","data","strFileName","strMimeType","blob","reader","self","window","defaultMime","mimeType","payload","url","anchor","document","createElement","toString","a","String","myBlob","Blob","MozBlob","WebKitBlob","fileName","call","bind","this","length","split","pop","href","indexOf","ajax","XMLHttpRequest","open","responseType","onload","e","target","response","setTimeout","send","test","navigator","msSaveBlob","dataUrlToBlob","saver","type","i","tempUiArr","Uint8Array","mx","charCodeAt","strUrl","parts","decoder","atob","decodeURIComponent","binData","uiArr","winMode","setAttribute","className","innerHTML","style","display","body","appendChild","click","removeChild","URL","revokeObjectURL","userAgent","replace","confirm","location","f","src","createObjectURL","constructor","btoa","y","encodeURIComponent","FileReader","result","readAsDataURL","template","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","hook","options","render","staticRenderFns","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat","install","Vue","installed","component","const","plugin","GlobalVue","global","use"],"mappings":"yMAiBEA,UAOM,SAASC,EAASC,EAAMC,EAAaC,GAE3C,IASCC,EACAC,EAVGC,EAAOC,OACVC,EAAc,2BACdC,EAAWN,GAAeK,EAC1BE,EAAUT,EACVU,GAAOT,IAAgBC,GAAeO,EACtCE,EAASC,SAASC,cAAc,KAChCC,EAAW,SAASC,GAAG,OAAOC,OAAOD,IACrCE,EAAUZ,EAAKa,MAAQb,EAAKc,SAAWd,EAAKe,YAAcN,EAC1DO,EAAWpB,GAAe,WAY3B,GATCgB,EAAQA,EAAOK,KAAOL,EAAOM,KAAKlB,GAAQa,KAEzB,SAAfF,OAAOQ,QAEThB,GADAC,EAAQ,CAACA,EAASD,IACD,GACjBC,EAAQA,EAAQ,IAIdC,GAAOA,EAAIe,OAAQ,OACrBJ,EAAWX,EAAIgB,MAAM,KAAKC,MAAMD,MAAM,KAAK,GAC3Cf,EAAOiB,KAAOlB,GACqB,IAA9BC,EAAOiB,KAAKC,QAAQnB,IAAY,CAC9B,IAAIoB,EAAK,IAAIC,eAOhB,OANGD,EAAKE,KAAM,MAAOtB,GAAK,GACvBoB,EAAKG,aAAe,OACpBH,EAAKI,OAAQ,SAASC,GAC1BpC,EAASoC,EAAEC,OAAOC,SAAUhB,EAAUd,IAElC+B,WAAW,WAAYR,EAAKS,QAAU,GAClCT,EAMZ,GAAG,iCAAiCU,KAAK/B,GAAS,CAEjD,KAAGA,EAAQgB,oBAA8BR,IAAWH,GAInD,OAAO2B,UAAUC,WAChBD,UAAUC,WAAWC,EAAclC,GAAUY,GAC7CuB,EAAMnC,GALPA,EAAQkC,EAAclC,GACtBD,EAASC,EAAQoC,MAAQtC,OAQ1B,GAAG,gBAAgBiC,KAAK/B,GAAS,CAEhC,IADA,IAAIqC,EAAE,EAAGC,EAAW,IAAIC,WAAWvC,EAAQgB,QAASwB,EAAGF,EAAUtB,OAC3DqB,EAAEG,IAAKH,EAAGC,EAAUD,GAAIrC,EAAQyC,WAAWJ,GAChDrC,EAAQ,IAAIQ,EAAO,CAAC8B,GAAY,CAACF,KAAMrC,IAQ1C,SAASmC,EAAcQ,GAStB,IARA,IAAIC,EAAOD,EAAOzB,MAAM,SACxBmB,EAAMO,EAAM,GACZC,EAAqB,UAAZD,EAAM,GAAiBE,KAAOC,mBACvCC,EAASH,EAASD,EAAMzB,OACxBsB,EAAIO,EAAQ/B,OACZqB,EAAG,EACHW,EAAO,IAAIT,WAAWC,GAEhBH,EAAEG,IAAKH,EAAGW,EAAMX,GAAIU,EAAQN,WAAWJ,GAE7C,OAAO,IAAI7B,EAAO,CAACwC,GAAQ,CAACZ,KAAMA,IAGnC,SAASD,EAAMlC,EAAKgD,GAEnB,GAAI,aAAc/C,EAYjB,OAXAA,EAAOiB,KAAOlB,EACdC,EAAOgD,aAAa,WAAYtC,GAChCV,EAAOiD,UAAY,mBACnBjD,EAAOkD,UAAY,iBACnBlD,EAAOmD,MAAMC,QAAU,OACvBnD,SAASoD,KAAKC,YAAYtD,GAC1B2B,WAAW,WACV3B,EAAOuD,QACPtD,SAASoD,KAAKG,YAAYxD,IACb,IAAV+C,GAAgBpB,WAAW,WAAYjC,EAAK+D,IAAIC,gBAAgB1D,EAAOiB,OAAS,MACjF,KACI,EAIR,GAAG,gDAAgDY,KAAKC,UAAU6B,WAKjE,MAJG,SAAS9B,KAAK9B,KAAMA,EAAI,QAAQA,EAAI6D,QAAQ,sBAAuBhE,IAClED,OAAO0B,KAAKtB,IACZ8D,QAAQ,oGAAoGC,SAAS7C,KAAKlB,IAEvH,EAIR,IAAIgE,EAAI9D,SAASC,cAAc,UAC/BD,SAASoD,KAAKC,YAAYS,IAEtBhB,GAAW,SAASlB,KAAK9B,KAC5BA,EAAI,QAAQA,EAAI6D,QAAQ,sBAAuBhE,IAEhDmE,EAAEC,IAAIjE,EACN4B,WAAW,WAAY1B,SAASoD,KAAKG,YAAYO,IAAO,KAOzD,GA5DAvE,EAAOM,aAAmBQ,EACzBR,EACA,IAAIQ,EAAO,CAACR,GAAU,CAACoC,KAAMrC,IA0D1BiC,UAAUC,WACb,OAAOD,UAAUC,WAAWvC,EAAMkB,GAGnC,GAAGhB,EAAK+D,IACPxB,EAAMvC,EAAK+D,IAAIQ,gBAAgBzE,IAAO,OAClC,CAEJ,GAAmB,iBAATA,GAAqBA,EAAK0E,cAAc/D,EACjD,IACC,OAAO8B,EAAO,QAAWpC,EAAa,WAAeH,EAAKyE,KAAK3E,IAC/D,MAAM4E,GACN,OAAOnC,EAAO,QAAWpC,EAAa,IAAMwE,mBAAmB7E,KAKjEC,EAAO,IAAI6E,YACJ/C,OAAO,SAASC,GACtBS,EAAMpB,KAAK0D,SAEZ9E,EAAO+E,cAAchF,GAEtB,OAAO,yCC/ET,MAnFA,SAA4BiF,EAAUtB,EAAOuB,EAAQC,EAASC,EAAsBC,EAElFC,EAAYC,EAAgBC,EAAmBC,GACrB,kBAAfH,IACTE,EAAoBD,EACpBA,EAAiBD,EACjBA,GAAa,GAIf,IAiBII,EAjBAC,EAA4B,mBAAXT,EAAwBA,EAAOS,QAAUT,EAsD9D,GApDID,GAAYA,EAASW,SACvBD,EAAQC,OAASX,EAASW,OAC1BD,EAAQE,gBAAkBZ,EAASY,gBACnCF,EAAQG,WAAY,EAEhBV,IACFO,EAAQI,YAAa,IAKrBZ,IACFQ,EAAQK,SAAWb,GAKjBE,GAEFK,EAAO,SAAcO,IAEnBA,EAAUA,GACV5E,KAAK6E,QAAU7E,KAAK6E,OAAOC,YAC3B9E,KAAK+E,QAAU/E,KAAK+E,OAAOF,QAAU7E,KAAK+E,OAAOF,OAAOC,aAGT,oBAAxBE,sBACrBJ,EAAUI,qBAIR1C,GACFA,EAAMxC,KAAKE,KAAMmE,EAAkBS,IAIjCA,GAAWA,EAAQK,uBACrBL,EAAQK,sBAAsBC,IAAIlB,IAMtCM,EAAQa,aAAed,GACd/B,IACT+B,EAAOJ,EAAa,WAClB3B,EAAMxC,KAAKE,KAAMoE,EAAqBpE,KAAKoF,MAAMC,SAASC,cACxD,SAAUV,GACZtC,EAAMxC,KAAKE,KAAMkE,EAAeU,MAIhCP,EACF,GAAIC,EAAQI,WAAY,CAEtB,IAAIa,EAAiBjB,EAAQC,OAE7BD,EAAQC,OAAS,SAAkCiB,EAAGZ,GAEpD,OADAP,EAAKvE,KAAK8E,GACHW,EAAeC,EAAGZ,QAEtB,CAEL,IAAIa,EAAWnB,EAAQoB,aACvBpB,EAAQoB,aAAeD,EAAW,GAAGE,OAAOF,EAAUpB,GAAQ,CAACA,GAInE,OAAOR,uvrBCkbT,uvhDCjgBgB+B,EAASC,GAEnBD,EAAQE,YAKbF,EAAQE,WAAY,EAEpBD,EAAIE,UAAW,UAAWA,IAG3BC,IAAMC,EACN,SACCL,GAGGM,EAAY,WAEO,oBAAXpH,OAEXoH,EAAYpH,OAAO+G,IAEQ,oBAAXM,SAEhBD,EAAYC,OAAON,KAGfK,GAEJA,EAAUE,IAAKH,GAGhBF,EAAUH,QAAUA"}